//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/InputSystemForVIVE/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/InputSystemForVIVE/InputActions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @InputActions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""LeftHand"",
            ""id"": ""272f6d14-89ba-496f-b7ff-215263d3219f"",
            ""actions"": [
                {
                    ""name"": ""TriggerPress"",
                    ""type"": ""Button"",
                    ""id"": ""578a0cd6-f388-4fa3-92f3-c09338bdf6fc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TriggerTouch"",
                    ""type"": ""Button"",
                    ""id"": ""e43fd4f9-8f68-485d-a7a3-081d8fa745a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Trigger"",
                    ""type"": ""Value"",
                    ""id"": ""5c8cf249-a01c-4b19-8eea-152b951f6a5a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""204073bf-582e-48f4-a392-6eaf1e637387"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryTouch"",
                    ""type"": ""Value"",
                    ""id"": ""48a4f982-c501-412c-a715-b9201cb08c37"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""e91ffee7-ec69-40fb-8663-4ebf07153bfe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary2DAxis"",
                    ""type"": ""Value"",
                    ""id"": ""0e72db49-759e-4b56-853f-a5e3b9bf0e04"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Primary2DAxisClick"",
                    ""type"": ""Button"",
                    ""id"": ""d36e4b01-3a25-4dc6-8094-179ddb10bd71"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary2DAxisTouch"",
                    ""type"": ""Button"",
                    ""id"": ""416d6df4-7244-4b5c-986c-11881e0eac57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary2DAxis"",
                    ""type"": ""Value"",
                    ""id"": ""344eec1c-660f-4d4a-8b5b-1a2362d9b2de"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Secondary2DAxisClick"",
                    ""type"": ""Button"",
                    ""id"": ""927e0cfe-b2ed-4a00-8048-3cd36742a8e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary2DAxisTouch"",
                    ""type"": ""Button"",
                    ""id"": ""28bf5850-459e-4b46-af7a-24a5a64fdf99"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grip"",
                    ""type"": ""Value"",
                    ""id"": ""26a9b492-9ead-4e86-9484-d69dc44c512e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripPress"",
                    ""type"": ""Button"",
                    ""id"": ""e91897d7-06ef-41b9-aaa2-b14ae7540fca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""1414e4ef-05d7-40b1-b759-aa2c2c9cee56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryTouch"",
                    ""type"": ""Button"",
                    ""id"": ""83a06fa6-147b-41c5-9841-1fd2bbb33c31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""4c72e7e0-5dda-44f9-855f-6bcae7eb29db"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerRotation"",
                    ""type"": ""Value"",
                    ""id"": ""8b0c064e-e191-42f1-9493-c908ccf24b22"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripPosition"",
                    ""type"": ""Value"",
                    ""id"": ""519bdbd2-563b-4227-8533-200dc2cd257f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripRotation"",
                    ""type"": ""Value"",
                    ""id"": ""9a324f95-c0bd-46b0-a59e-7576f0279b65"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c28d7366-eaa9-4c1a-afcd-11a42e73afe5"",
                    ""expectedControlType"": ""Haptic"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PokePosition"",
                    ""type"": ""Value"",
                    ""id"": ""ca86dd28-8403-4411-b357-12e60359d869"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PokeRotation"",
                    ""type"": ""Value"",
                    ""id"": ""e94beec4-c4d1-4a9b-8ea7-bd2df7ee1067"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PinchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""256bb79a-806e-47ad-a739-432054b9539c"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PinchRotation"",
                    ""type"": ""Value"",
                    ""id"": ""d6b9b40b-787e-49ef-9eaf-252c7d0a059a"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PinchValue"",
                    ""type"": ""Value"",
                    ""id"": ""3519abc9-d93f-47e5-9e52-1ab77d92e331"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PinchReady"",
                    ""type"": ""Button"",
                    ""id"": ""129007ee-4583-4243-ba48-aab01c86e1ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerActivate"",
                    ""type"": ""Value"",
                    ""id"": ""557ceb4f-b921-471e-959a-4b1a388d2d2e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerActivateReady"",
                    ""type"": ""Button"",
                    ""id"": ""29286b83-438c-4ebc-9156-d806a238645d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GraspValue"",
                    ""type"": ""Value"",
                    ""id"": ""40d16137-3367-44f1-a006-4e73810c7270"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GraspReady"",
                    ""type"": ""Button"",
                    ""id"": ""3d11c429-5e4d-4071-b939-edf189aa39f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PalmPosePosition"",
                    ""type"": ""Value"",
                    ""id"": ""eefaf18c-77c4-4239-babe-adf9e6594e78"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PalmPoseRotation"",
                    ""type"": ""Value"",
                    ""id"": ""216e3b04-41b1-40d4-875e-83edfdd6c730"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PinchPose"",
                    ""type"": ""Value"",
                    ""id"": ""554c8747-f43e-4d59-a959-ef764e2f0345"",
                    ""expectedControlType"": ""Pose"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PokePose"",
                    ""type"": ""Value"",
                    ""id"": ""b6c60260-b2c8-43b3-b77a-311536ae7a28"",
                    ""expectedControlType"": ""Pose"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PalmPose"",
                    ""type"": ""Value"",
                    ""id"": ""17f9c634-10d0-4761-94ea-1d79bb2b758b"",
                    ""expectedControlType"": ""Pose"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripPose"",
                    ""type"": ""Value"",
                    ""id"": ""e57e1937-cf92-4b04-b7c9-41ec409292b6"",
                    ""expectedControlType"": ""Pose"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AimPose"",
                    ""type"": ""Value"",
                    ""id"": ""f2111c43-d1dc-425e-8e48-4429849ab749"",
                    ""expectedControlType"": ""Pose"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""IsTracked"",
                    ""type"": ""Button"",
                    ""id"": ""384094ab-6290-4de1-9b73-6dd7fae94298"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TrackingState"",
                    ""type"": ""Value"",
                    ""id"": ""789d1198-014e-4bf4-b111-77520dfe49b6"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripTouch"",
                    ""type"": ""Button"",
                    ""id"": ""41e28213-f06d-4361-bf18-ba15e189de5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThumbrestTouched"",
                    ""type"": ""Button"",
                    ""id"": ""3db6b074-3acb-4c3f-bb16-11f8b9e38d37"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b9c19907-3b5c-4207-ad18-5a86655f688c"",
                    ""path"": ""<XRController>{LeftHand}/{triggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ffba069-2076-48e0-b33b-bab9598844da"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb10cbdb-a9e7-4bec-b76c-1718f456ac14"",
                    ""path"": ""<XRController>{LeftHand}/{TriggerTouch}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec353a5a-6a7a-4ee6-a33e-d12a8c0b705a"",
                    ""path"": ""<XRController>{LeftHand}/{trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3dfde460-9bef-4bd9-943d-170adc171ff8"",
                    ""path"": ""<XRController>{LeftHand}/{PrimaryTouch}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a98fe1d-5477-4473-9ed1-05d2decb2c15"",
                    ""path"": ""<XRController>{LeftHand}/{primaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9603ae96-fef3-432c-88a0-282232c1368d"",
                    ""path"": ""<XRController>{LeftHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""171f2010-aff7-4c02-8e86-44c84eba40e6"",
                    ""path"": ""<XRController>{LeftHand}/system"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54ac7ab0-8ca9-4cbc-a6d1-da5ee0b055cb"",
                    ""path"": ""<XRController>{LeftHand}/{primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary2DAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85d45408-e658-4df8-ab60-de9273ceb30c"",
                    ""path"": ""<XRController>{LeftHand}/{primary2DAxisClick}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary2DAxisClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a07f0bb7-9d68-4288-b0f1-78c62a995fa4"",
                    ""path"": ""<XRController>{LeftHand}/{primary2DAxisTouch}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary2DAxisTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb03eabc-18e2-447a-a308-dc36cf9ec38e"",
                    ""path"": ""<XRController>{LeftHand}/{secondary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary2DAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fadeed58-e6fc-4cc4-9fdc-5cfae044209c"",
                    ""path"": ""<XRController>{LeftHand}/{secondary2DAxisClick}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary2DAxisClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b74594f8-e87a-43ae-82ec-47612e07bfb3"",
                    ""path"": ""<XRController>{LeftHand}/{secondary2DAxisTouch}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary2DAxisTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26245d74-dc1a-4fce-a7e1-1d4688ef73b1"",
                    ""path"": ""<XRController>{LeftHand}/{grip}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1458d4ea-a188-4ad0-9215-0e48997da150"",
                    ""path"": ""<XRController>{LeftHand}/{gripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c3f7ce0-b62f-44e2-a1e1-11f143de72d7"",
                    ""path"": ""<XRController>{LeftHand}/{secondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cfe2a5d-28c1-425b-998e-810968e19292"",
                    ""path"": ""<XRController>{LeftHand}/{secondaryTouch}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ecaec07-8710-4084-94c5-efcc1f6a9dea"",
                    ""path"": ""<XRController>{LeftHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a636ac70-9a4b-4ed7-b011-7bad0b77ac75"",
                    ""path"": ""<XRController>{LeftHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbd741a2-a5d7-47ce-96d4-5f92cccdab35"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21ae7383-37ab-4b76-a2bf-5ac51f0f3d68"",
                    ""path"": ""<XRController>{LeftHand}/haptic"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Haptic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b72dfc23-7e0b-4dce-8fdd-87199f44763d"",
                    ""path"": ""<XRController>{LeftHand}/pokePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PokePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95909a99-e8b7-442d-a780-1e51bae768c7"",
                    ""path"": ""<XRController>{LeftHand}/pokeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PokeRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef50bd8f-94ba-4a17-88bd-e830c0050c46"",
                    ""path"": ""<XRController>{LeftHand}/pinchPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PinchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8177a21e-2065-47bd-bf2a-f3ec68204f77"",
                    ""path"": ""<XRController>{LeftHand}/pinchRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PinchRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf6c549b-a5ea-43dd-acc6-f346d46a293b"",
                    ""path"": ""<XRController>{LeftHand}/pinchValue"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PinchValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8bd5155-5910-497c-96ba-4a1983274f8a"",
                    ""path"": ""<XRController>{LeftHand}/pinchReady"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PinchReady"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0feae31f-6f32-4267-a3cc-8aae8c4fda1c"",
                    ""path"": ""<XRController>{LeftHand}/pointerActivateValue"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PointerActivate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0322cb99-7096-4e19-82c7-8e8e12fe47ce"",
                    ""path"": ""<XRController>{LeftHand}/pointerActivateReady"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PointerActivateReady"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8252b1eb-9413-4080-b488-57653224777e"",
                    ""path"": ""<XRController>{LeftHand}/graspValue"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""GraspValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78d208f0-0e3f-4687-8a1f-e3b5d12bfc04"",
                    ""path"": ""<XRController>{LeftHand}/graspReady"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""GraspReady"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f933235b-9764-4d4a-9eeb-6fa4349ad9f1"",
                    ""path"": ""<XRController>{LeftHand}/palmPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PalmPosePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9362a799-90e0-4573-937b-b1036a12c159"",
                    ""path"": ""<XRController>{LeftHand}/palmRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PalmPoseRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f21e1a19-432f-4b21-80f1-8d125378f5ef"",
                    ""path"": ""<XRController>{LeftHand}/pinchPose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PinchPose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20f80365-788b-4b7f-b2a0-9a6658dc2a21"",
                    ""path"": ""<HandInteractionPoses>{LeftHand}/pinchPose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PinchPose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5841423e-362a-451c-a426-1d63b5deaa39"",
                    ""path"": ""<XRController>{LeftHand}/pokePose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PokePose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80aff0e0-ac53-4f66-9220-5136adb9223c"",
                    ""path"": ""<HandInteractionPoses>{LeftHand}/pokePose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PokePose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5007351e-6380-4ab3-8405-5c091789fc29"",
                    ""path"": ""<XRController>{LeftHand}/palmPose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PalmPose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42392da5-4328-46a7-95fe-9c0beec80b1f"",
                    ""path"": ""<XRController>{LeftHand}/devicePose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""GripPose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""953d54c9-4180-44b0-8045-987c828aecec"",
                    ""path"": ""<XRController>{LeftHand}/pointer"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""AimPose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d8fde07-f5ac-4a1b-b3e9-783eccfc1d17"",
                    ""path"": ""<XRController>{LeftHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IsTracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""134ee4a8-3562-4560-8003-ca3f9791d9e8"",
                    ""path"": ""<XRController>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TrackingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b8dc98e-0f18-4c7b-a4b8-de36efda183a"",
                    ""path"": ""<XRController>{LeftHand}/gripTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a34abeb-b57c-4bef-8b3d-9b845377c543"",
                    ""path"": ""<XRController>{LeftHand}/thumbrestTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThumbrestTouched"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightHand"",
            ""id"": ""fd87d126-5dc2-445c-82df-1abc6c9f8076"",
            ""actions"": [
                {
                    ""name"": ""TriggerPress"",
                    ""type"": ""Button"",
                    ""id"": ""bc163c5e-01a5-48ae-83b3-87e68f24f888"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TriggerTouch"",
                    ""type"": ""Button"",
                    ""id"": ""9f8d7577-92b6-47e1-9843-4022bb3c83bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Trigger"",
                    ""type"": ""Value"",
                    ""id"": ""2fccaf18-d578-4ac9-9d0b-08db4a2e1dc7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""b87d0657-0e2f-41f9-92ee-6c7f0b0fa4f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryTouch"",
                    ""type"": ""Value"",
                    ""id"": ""7612bd2d-ec25-4cb7-8eb2-3a4b7704b025"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""561d782c-0eab-4674-80c5-7a8eb70cf246"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary2DAxis"",
                    ""type"": ""Value"",
                    ""id"": ""273526bd-c3ba-4f35-ac7a-840c1ed6ab6d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Primary2DAxisClick"",
                    ""type"": ""Button"",
                    ""id"": ""1c531107-9819-4f1f-a0e7-f11166016436"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary2DAxisTouch"",
                    ""type"": ""Button"",
                    ""id"": ""4de79a39-d622-4859-8f67-791365c0b780"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary2DAxis"",
                    ""type"": ""Value"",
                    ""id"": ""5c85476c-f285-4a0a-8ed8-31466beae969"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Secondary2DAxisClick"",
                    ""type"": ""Button"",
                    ""id"": ""83227e26-e8f1-416e-a4a6-b70394fe5ea5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary2DAxisTouch"",
                    ""type"": ""Button"",
                    ""id"": ""05c6375e-e244-427a-8e61-cd465ffa62ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grip"",
                    ""type"": ""Value"",
                    ""id"": ""f17f4516-fcdf-4891-9411-fee4983cd798"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripPress"",
                    ""type"": ""Button"",
                    ""id"": ""c20d8054-3d24-478f-8c51-5df4fec8c02a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""cba87b5e-c43b-4c38-b5dc-320d8fbb6136"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryTouch"",
                    ""type"": ""Button"",
                    ""id"": ""b20f3aa0-32c6-486d-a9b2-4d8baca0799f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""cdabdfa9-be08-4d02-a187-8ca7fb8de227"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerRotation"",
                    ""type"": ""Value"",
                    ""id"": ""9f9a934e-d0b6-4c5c-b6bc-56337dc99526"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripPosition"",
                    ""type"": ""Value"",
                    ""id"": ""837402e0-0d1e-4c9c-9615-54d04b0f4e22"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripRotation"",
                    ""type"": ""Value"",
                    ""id"": ""56691437-e5af-49dd-81ba-54b81e452dd1"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6be1ce8f-f79b-4c85-bb4f-c7658d3f8e43"",
                    ""expectedControlType"": ""Haptic"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PokePosition"",
                    ""type"": ""Value"",
                    ""id"": ""9935c10d-ea5d-465e-aa25-b0210900fce8"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PokeRotation"",
                    ""type"": ""Value"",
                    ""id"": ""1cab912e-af1b-48ee-954e-56db354bf1da"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PinchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""40503375-261d-4313-9832-24a03360f834"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PinchRotation"",
                    ""type"": ""Value"",
                    ""id"": ""c416ae8b-9650-4891-8194-55a7cd10ac5b"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PinchValue"",
                    ""type"": ""Value"",
                    ""id"": ""96cce805-fe3a-4fcd-b41f-ca6ea65ab3d0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PinchReady"",
                    ""type"": ""Button"",
                    ""id"": ""3c953148-081c-4e8e-99c9-d6d03deac654"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerActivate"",
                    ""type"": ""Value"",
                    ""id"": ""fb1ed2f5-3dca-4c5d-a721-96686c638084"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerActivateReady"",
                    ""type"": ""Button"",
                    ""id"": ""cb059c4a-a108-4475-bff2-f6f2c2f31031"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GraspValue"",
                    ""type"": ""Value"",
                    ""id"": ""8d55fa00-593f-417c-b576-671cf9bf4bdb"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GraspReady"",
                    ""type"": ""Button"",
                    ""id"": ""6c56f1f2-9ba8-4f14-8cbe-75c054edc696"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PalmPosePosition"",
                    ""type"": ""Value"",
                    ""id"": ""7effa698-08b7-47e9-bc94-59f31133768c"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PalmPoseRotation"",
                    ""type"": ""Value"",
                    ""id"": ""2b13527a-a47c-45af-aca3-1c063f84deb3"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PinchPose"",
                    ""type"": ""Value"",
                    ""id"": ""6764a0d9-4f97-4b87-a6e2-19d02a7014a5"",
                    ""expectedControlType"": ""Pose"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PokePose"",
                    ""type"": ""Value"",
                    ""id"": ""e48d4b55-7505-44c6-8536-c0fe584f9fc3"",
                    ""expectedControlType"": ""Pose"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PalmPose"",
                    ""type"": ""Value"",
                    ""id"": ""26c03d43-7d0c-440d-a014-8a2fbfd68032"",
                    ""expectedControlType"": ""Pose"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripPose"",
                    ""type"": ""Value"",
                    ""id"": ""21315abc-6df6-492e-b46e-7e9b7ee603b5"",
                    ""expectedControlType"": ""Pose"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AimPose"",
                    ""type"": ""Value"",
                    ""id"": ""d5233984-a1e5-4197-9105-d4f6c14a877a"",
                    ""expectedControlType"": ""Pose"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""IsTracked"",
                    ""type"": ""Button"",
                    ""id"": ""d1478f77-9424-45e1-bbe0-949fcfaec599"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TrackingState"",
                    ""type"": ""Value"",
                    ""id"": ""c13385e1-8194-4e1b-87a8-076ae733a2f4"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripTouch"",
                    ""type"": ""Button"",
                    ""id"": ""9dcce14b-8a93-4e8b-b15b-cc009a5ee6a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThumbrestTouched"",
                    ""type"": ""Button"",
                    ""id"": ""a3de7c95-047b-4186-ba20-3006516afbd4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e2185573-2cbd-4af0-9d4b-e03ff8b24d8f"",
                    ""path"": ""<XRController>{RightHand}/{triggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1bf452d-b059-4c1e-9c23-3be1c6be789e"",
                    ""path"": ""<XRController>{RightHand}/{trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d09e2fdd-08b3-42eb-86c8-5c3a8f4a03c5"",
                    ""path"": ""<XRController>{RightHand}/{primaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0657f0e8-4c3b-45d4-a00b-fda175a6684d"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryTouch}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3d9acf1-00ab-4616-951f-ef81d04d4d58"",
                    ""path"": ""<XRController>{RightHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""369648ca-da2c-4cb7-bb0c-8b7dcab3b6b5"",
                    ""path"": ""<XRController>{RightHand}/system"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""488857b2-965c-486c-b24e-e21628ad2a07"",
                    ""path"": ""<XRController>{RightHand}/{primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary2DAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""feccb40e-4fa1-488f-a2f1-f44c2b80ae37"",
                    ""path"": ""<XRController>{RightHand}/{primary2DAxisClick}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary2DAxisClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62761c89-0d6d-40f1-ae88-88fa58d7ff02"",
                    ""path"": ""<XRController>{RightHand}/{primary2DAxisTouch}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary2DAxisTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e40a1a86-f851-421e-86c4-aec93c7f1d9b"",
                    ""path"": ""<XRController>{RightHand}/{secondary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary2DAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d094a06a-f8ca-4c85-b478-a5276f7da3e4"",
                    ""path"": ""<XRController>{RightHand}/{secondary2DAxisClick}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary2DAxisClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75e038e5-ec3b-417e-adf4-77881b52a1ff"",
                    ""path"": ""<XRController>{RightHand}/{secondary2DAxisTouch}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary2DAxisTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2c3d836-9c35-4647-a506-9e03f37d837f"",
                    ""path"": ""<XRController>{RightHand}/{grip}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f0b2479-b471-4775-8381-980b7957af20"",
                    ""path"": ""<XRController>{RightHand}/{gripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d0fd645-57e1-48c3-9393-701a1d96c9a2"",
                    ""path"": ""<XRController>{RightHand}/{secondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d034f83-a2ec-4c56-8a45-74443b36bb77"",
                    ""path"": ""<XRController>{RightHand}/{secondaryTouch}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f32db05c-c036-499e-9e7c-d7a3634024c8"",
                    ""path"": ""<XRController>{RightHand}/{TriggerTouch}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a41f98b-66f3-4d43-b8fd-38060154a5b8"",
                    ""path"": ""<XRController>{RightHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32216a56-efd4-40cf-8456-48a3de785bf0"",
                    ""path"": ""<XRController>{RightHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5aaec621-392f-4e7f-ab25-0fb8aa96efa5"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""750b0360-40ef-4754-9800-75b37ba95f52"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f36967e5-cf69-4b7c-93fa-edf76ee86153"",
                    ""path"": ""<XRController>{RightHand}/haptic"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Haptic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87ff5450-b517-401d-b90d-3e6f848e75b7"",
                    ""path"": ""<XRController>{RightHand}/pokePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PokePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f14f13ca-8da2-4e63-83c4-b68a78eab424"",
                    ""path"": ""<XRController>{RightHand}/pokeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PokeRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a20bff89-90cd-4384-b62c-eb91108f84d3"",
                    ""path"": ""<XRController>{RightHand}/pinchPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PinchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89204b63-d938-4388-93b5-adb41de059dd"",
                    ""path"": ""<XRController>{RightHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PinchRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eda35a4e-4556-4211-b2bc-bdfed3d1a28e"",
                    ""path"": ""<XRController>{RightHand}/pinchValue"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PinchValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33cf5d7b-cbb7-4191-a16e-3f29022742ba"",
                    ""path"": ""<XRController>{RightHand}/pinchReady"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PinchReady"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2084ad4-bee5-41ca-9842-55262e4676f1"",
                    ""path"": ""<XRController>{RightHand}/pointerActivateValue"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PointerActivate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a3f4ccc-404e-408b-9a53-9abb7a76c9f2"",
                    ""path"": ""<XRController>{RightHand}/pointerActivateReady"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PointerActivateReady"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a1dbf7a-29f0-438f-af44-6045ac4bafdc"",
                    ""path"": ""<XRController>{RightHand}/graspValue"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""GraspValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0793b073-0257-464d-998e-2af510ddcc52"",
                    ""path"": ""<XRController>{RightHand}/graspReady"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""GraspReady"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65578fec-4ca6-4c65-892a-53fad42cda51"",
                    ""path"": ""<XRController>{RightHand}/palmPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PalmPosePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b601122-6e1e-4075-936d-9c7ef3ca95da"",
                    ""path"": ""<XRController>{RightHand}/palmRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PalmPoseRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8af3a192-50dd-4a21-ab2b-f81f27fffdf0"",
                    ""path"": ""<XRController>{RightHand}/pinchPose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PinchPose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2853aa00-dbaa-445e-964d-f69fa2079019"",
                    ""path"": ""<HandInteractionPoses>{RightHand}/pinchPose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PinchPose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b72ebbd-268f-40fe-af08-e32d5a87689c"",
                    ""path"": ""<XRController>{RightHand}/pokePose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PokePose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0de6fb4-9427-4e5c-8af1-9bbc0bd7f97b"",
                    ""path"": ""<HandInteractionPoses>{RightHand}/pokePose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PokePose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08536d41-f3d5-4ad0-8106-09de492060d7"",
                    ""path"": ""<XRController>{RightHand}/palmPose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PalmPose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3dff52aa-076e-411f-b79e-cc8712caeab8"",
                    ""path"": ""<XRController>{RightHand}/devicePose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""GripPose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6f0bc08-3300-48f4-b5ca-ef9307e1062d"",
                    ""path"": ""<XRController>{RightHand}/pointer"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""AimPose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4a8f0e5-31fc-40a3-9495-525e04a99fcc"",
                    ""path"": ""<XRController>{RightHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IsTracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b7dac17-1c8c-4ccd-ac11-820507868aa4"",
                    ""path"": ""<XRController>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TrackingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48259e5f-8707-404d-a2f4-3f59909928f3"",
                    ""path"": ""<XRController>{RightHand}/gripTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""406f7078-592d-449c-88ed-231dbeb70f37"",
                    ""path"": ""<XRController>{RightHand}/thumbrestTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThumbrestTouched"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""HMD"",
            ""id"": ""21d522e0-0295-43ef-b60a-3b355794717b"",
            ""actions"": [
                {
                    ""name"": ""hmdPosition"",
                    ""type"": ""Value"",
                    ""id"": ""36a3121d-efce-478c-867c-a8d354777b78"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""hmdRotation"",
                    ""type"": ""Value"",
                    ""id"": ""4e56a29d-b0cc-42fd-a087-552950afac95"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""08f50b61-5d92-42ac-bdb9-b898a4f0d4a7"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""hmdPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09769104-56ee-4fae-9065-07f530388e75"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""hmdRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""a725e4f4-1262-4d6f-8a52-b8ba368d4c82"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""7d87f920-38ab-4a79-9716-27722a02c594"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""pointerPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3e8f3014-2311-4c71-9a89-6fffe0d7ae05"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""pointerRotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fff59030-bd11-46a7-96d3-35f8e50a86ca"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Value"",
                    ""id"": ""8f2c28d0-e5c0-4919-9514-8b8509e0e33a"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""78d62036-f819-477f-ba34-5041450a668f"",
                    ""path"": ""<XRController>/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc05f8fe-0a9a-49ec-84a5-01ccef667093"",
                    ""path"": ""<XRController>/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""047b05df-5df2-4fcf-81d7-a51f39906c16"",
                    ""path"": ""<XRController>/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pointerRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3144164d-3ee1-49fb-a712-103e65fb08e1"",
                    ""path"": ""<XRController>/trigger"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d28de5ca-4e64-4750-b2f5-c080c9af8eb8"",
                    ""path"": ""<ViveHandInteraction>/selectValue"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""EyeGaze"",
            ""id"": ""6532b117-4f65-48ed-99d9-0fb75098c70e"",
            ""actions"": [
                {
                    ""name"": ""Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""b0d47f30-0bec-41bd-8ba8-10ece388b9f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EyePosition"",
                    ""type"": ""Value"",
                    ""id"": ""9a9b88ac-c411-4d88-afe6-6ba4d4d3032f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""EyeRotation"",
                    ""type"": ""Value"",
                    ""id"": ""5d71d1ff-f098-4cd5-b828-063840b54916"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""EyePose"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b546e748-7403-49db-8503-6338a072f2e7"",
                    ""expectedControlType"": ""Pose"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""20d241ca-21dd-4ffc-87a9-c71b940c2880"",
                    ""path"": ""<EyeGaze>/pose/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""958f4b02-7bde-473c-aacb-9d71f68f26ee"",
                    ""path"": ""<EyeGaze>/pose/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""EyePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e90f86c-7d3b-4c84-a92d-f3e377ba4b1e"",
                    ""path"": ""<EyeGaze>/pose/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""EyeRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53c4a446-815f-4a63-8c7a-47e62e58e2e2"",
                    ""path"": ""<EyeGaze>/pose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EyePose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftHandInteraction"",
            ""id"": ""d2d07005-2131-484b-84aa-b4249e883df6"",
            ""actions"": [
                {
                    ""name"": ""GripValue"",
                    ""type"": ""Value"",
                    ""id"": ""a4544734-4795-4406-8cb1-ace9cd298648"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SelectValue"",
                    ""type"": ""Value"",
                    ""id"": ""23316728-682c-4d8d-8710-b5e62a12d036"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""IsTracked"",
                    ""type"": ""Value"",
                    ""id"": ""aab2bef5-1a89-469c-be6c-926e32f82bd0"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TrackingState"",
                    ""type"": ""Value"",
                    ""id"": ""d2d2119c-9a31-4aac-ac8e-5e6943c63abf"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DevicePose"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cce2dab3-f058-4b22-856f-ddd11265bd2f"",
                    ""expectedControlType"": ""Pose"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DevicePosition"",
                    ""type"": ""Value"",
                    ""id"": ""bb8d1185-1e7e-413f-b31a-c381bcb30e99"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DeviceRotation"",
                    ""type"": ""Value"",
                    ""id"": ""b39cdd40-0fa0-4d80-87c6-66515c44cdd3"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pointer"",
                    ""type"": ""PassThrough"",
                    ""id"": ""368450bc-6252-40f7-ae7e-d33f1beb9265"",
                    ""expectedControlType"": ""Pose"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4e2de040-50f1-493b-92ef-8e7fc50e636f"",
                    ""path"": ""<ViveHandInteraction>{LeftHand}/gripValue"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0478c468-23fd-4ec2-adb0-97636bf8953a"",
                    ""path"": ""<ViveHandInteraction>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeviceRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""641de56c-e938-435a-a53e-27953f0d1d26"",
                    ""path"": ""<ViveHandInteraction>{LeftHand}/pointerPose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18ce18c6-fd05-4e8c-babe-0d210c8072a7"",
                    ""path"": ""<ViveHandInteraction>{LeftHand}/devicePose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DevicePose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68336b0c-b052-4f6b-9ef8-ce9cb2c0f29a"",
                    ""path"": ""<ViveHandInteraction>{LeftHand}/selectValue"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75f0df75-85ba-49d7-8c19-1be4fdbb0f54"",
                    ""path"": ""<ViveHandInteraction>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DevicePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d912f46a-cb75-4ee7-b0dc-d426df8f9eb5"",
                    ""path"": ""<ViveHandInteraction>{LeftHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IsTracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2bc0ddf-c7c0-468b-b40e-3ac192707128"",
                    ""path"": ""<ViveHandInteraction>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TrackingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightHandInteraction"",
            ""id"": ""83941ec2-f80b-4112-9d20-e80de1a7dd80"",
            ""actions"": [
                {
                    ""name"": ""GripValue"",
                    ""type"": ""Value"",
                    ""id"": ""b518105d-2f80-4210-ae9f-7f76f2534d75"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SelectValue"",
                    ""type"": ""Value"",
                    ""id"": ""667040dc-8b07-4ac3-8dad-5a3cb95d2776"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""IsTracked"",
                    ""type"": ""Value"",
                    ""id"": ""66183948-8c96-4210-9dbf-714b6902a0f9"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TrackingState"",
                    ""type"": ""Value"",
                    ""id"": ""449b4bae-3fc1-482c-ad2a-245e7e61f56f"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DevicePose"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cea4014b-5d47-425e-9fbd-23d1928a2942"",
                    ""expectedControlType"": ""Pose"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DevicePosition"",
                    ""type"": ""Value"",
                    ""id"": ""062e3e26-1292-41e5-a66e-2ac5d7f4ad87"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DeviceRotation"",
                    ""type"": ""Value"",
                    ""id"": ""79c41bc6-ef24-480e-86b5-ee6b788905e3"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pointer"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2ec06185-1164-40a6-a1dc-447e85a6dbf4"",
                    ""expectedControlType"": ""Pose"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""61278f35-716c-43fd-be90-708f9fad7679"",
                    ""path"": ""<ViveHandInteraction>{RightHand}/gripValue"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6310bc2-9357-474f-9697-08ce3e608657"",
                    ""path"": ""<ViveHandInteraction>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeviceRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""365925ba-5c77-4b5b-9373-3c48318a2130"",
                    ""path"": ""<ViveHandInteraction>{RightHand}/pointerPose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""067cd021-0db5-43ba-9bfe-6702a28494b2"",
                    ""path"": ""<ViveHandInteraction>{RightHand}/devicePose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DevicePose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96e71260-7382-47a2-ad38-a9b9256c02e4"",
                    ""path"": ""<ViveHandInteraction>{RightHand}/selectValue"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63f8a4db-e55f-4fae-a798-d5f58f0e6596"",
                    ""path"": ""<ViveHandInteraction>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DevicePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8365142-5e67-4e8d-b65b-aa2d71d7ca80"",
                    ""path"": ""<ViveHandInteraction>{RightHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IsTracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3d5adc4-72a7-4f82-9dc3-62b1d8670b74"",
                    ""path"": ""<ViveHandInteraction>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TrackingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftWristTracker"",
            ""id"": ""5aeb405c-f18d-4e32-9f96-631f25da1f56"",
            ""actions"": [
                {
                    ""name"": ""IsTracked"",
                    ""type"": ""Value"",
                    ""id"": ""c5913e73-42a4-4a6f-8c4a-5d1d593539f1"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TrackingState"",
                    ""type"": ""Value"",
                    ""id"": ""ff3470e9-cd3d-4dd6-a0a5-ef4ac92cd845"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DevicePose"",
                    ""type"": ""PassThrough"",
                    ""id"": ""aa7adefb-5459-4d70-ab70-85ab300129b5"",
                    ""expectedControlType"": ""Pose"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DevicePosition"",
                    ""type"": ""Value"",
                    ""id"": ""61d0904c-1a28-4f39-9c7c-1443ff634e97"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DeviceRotation"",
                    ""type"": ""Value"",
                    ""id"": ""61ae0f08-54a2-467a-a66f-d78d94311fe6"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""a10dd602-4ad3-40b7-bda5-5b8ec16968e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""aa3dc9a5-6c8b-4d2c-a42a-e85b05dea475"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b4e05bf6-73b2-4d30-a265-954e9224c8b7"",
                    ""path"": ""<ViveWristTracker>{LeftHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d43375d9-f7ea-4fea-bce8-61cda6345afc"",
                    ""path"": ""<ViveWristTracker>{LeftHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IsTracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a118aad9-ec3f-4de9-a20d-bf571616ad9e"",
                    ""path"": ""<ViveWristTracker>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""466c8106-27f3-4dd7-bbfc-357730160c31"",
                    ""path"": ""<ViveWristTracker>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TrackingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d45feb5-d3fc-48c9-b0b8-e30f427721a5"",
                    ""path"": ""<ViveWristTracker>{LeftHand}/devicePose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DevicePose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26bf9ad8-4faf-49c8-a63d-3c3bb44708b7"",
                    ""path"": ""<ViveWristTracker>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DevicePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a8b7ce7-b6ab-4b19-81ee-354f9df3bf78"",
                    ""path"": ""<ViveWristTracker>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeviceRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightWristTracker"",
            ""id"": ""55dad619-d42a-4df9-b440-9e59d2984bfb"",
            ""actions"": [
                {
                    ""name"": ""IsTracked"",
                    ""type"": ""Value"",
                    ""id"": ""10337bea-90e2-4c16-a009-8a76dd6427c1"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TrackingState"",
                    ""type"": ""Value"",
                    ""id"": ""7148df9a-bfb5-4414-944c-0a70855ea38b"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DevicePose"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e8c00240-d3c7-40d8-87dd-35189faa78e6"",
                    ""expectedControlType"": ""Pose"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DevicePosition"",
                    ""type"": ""Value"",
                    ""id"": ""eb5d3c3e-e851-42c2-b253-418870d1351d"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DeviceRotation"",
                    ""type"": ""Value"",
                    ""id"": ""c5908604-965b-43cc-a181-b60b175f723a"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""6e81482b-ac29-4761-9c03-60154fc46fc8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""c26c25be-ec63-44dc-ba53-8fcfe723f817"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""37f8a451-7796-4bea-95c1-8c6a727e4f64"",
                    ""path"": ""<ViveWristTracker>{RightHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab563289-9657-4ff3-b167-ccb46054154a"",
                    ""path"": ""<ViveWristTracker>{RightHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IsTracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d060f6ac-c122-4c3e-8f50-962a66820558"",
                    ""path"": ""<ViveWristTracker>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eab46027-1107-4e76-968e-030b27d5b134"",
                    ""path"": ""<ViveWristTracker>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TrackingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d711c2d9-787d-43a0-8d04-41733fe116d2"",
                    ""path"": ""<ViveWristTracker>{RightHand}/devicePose"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DevicePose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7f7fa3e-64c3-44e4-a794-c4eb4f4f6599"",
                    ""path"": ""<ViveWristTracker>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DevicePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a570970-c358-430e-8ce3-ce9d180377e8"",
                    ""path"": ""<ViveWristTracker>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeviceRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRTracker"",
            ""id"": ""a3934b2a-22e9-4ac1-adf5-2444010a08d2"",
            ""actions"": [
                {
                    ""name"": ""UltimateTrackerIsTracked0"",
                    ""type"": ""Value"",
                    ""id"": ""e8fb14bc-bd2a-4eb9-b8d8-5f6b813c9f0a"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerIsTracked1"",
                    ""type"": ""Value"",
                    ""id"": ""91336d1c-a431-40bb-bbfd-7a1b8a4439fb"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerIsTracked2"",
                    ""type"": ""Value"",
                    ""id"": ""05721cdc-eb09-4789-993c-ba2d17cb8998"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerIsTracked3"",
                    ""type"": ""Value"",
                    ""id"": ""fa23237f-52a4-4a2c-bdce-04dee5a58ebc"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerIsTracked4"",
                    ""type"": ""Value"",
                    ""id"": ""2d850360-9e9c-4ca7-adf4-4f2dc68c9cc9"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerTrackingState0"",
                    ""type"": ""Value"",
                    ""id"": ""efa29899-276e-45f4-bad1-d32ba46a0368"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerTrackingState1"",
                    ""type"": ""Value"",
                    ""id"": ""6ccc130c-ccd5-44ab-ad8b-e69ed795a864"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerTrackingState2"",
                    ""type"": ""Value"",
                    ""id"": ""6f96df7e-bb24-4161-80a1-49974de0d43b"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerTrackingState3"",
                    ""type"": ""Value"",
                    ""id"": ""bae3a2bc-3bcb-478c-8d21-436c23241d3c"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerTrackingState4"",
                    ""type"": ""Value"",
                    ""id"": ""4869ba90-8e08-48f7-9ac2-e17ad338c60f"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerPosition0"",
                    ""type"": ""Value"",
                    ""id"": ""1f84e0f5-f336-43c4-b6fa-b61e9feed5e4"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerPosition1"",
                    ""type"": ""Value"",
                    ""id"": ""e3464bb9-6b24-4d7c-9e2d-ea6c436592f7"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerPosition2"",
                    ""type"": ""Value"",
                    ""id"": ""970672d3-acf5-4812-977e-8c824f912464"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerPosition3"",
                    ""type"": ""Value"",
                    ""id"": ""3a167fad-2d5a-48d3-8218-e00a39603064"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerPosition4"",
                    ""type"": ""Value"",
                    ""id"": ""a865432e-875d-4e2e-9947-bfe06e576110"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerRotation0"",
                    ""type"": ""Value"",
                    ""id"": ""654b29c9-420a-46f7-8194-eb000eef7e4c"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerRotation1"",
                    ""type"": ""Value"",
                    ""id"": ""4c1f3249-53e8-479e-a381-912b2a551ac7"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerRotation2"",
                    ""type"": ""Value"",
                    ""id"": ""8b5e3d55-7a63-402d-b04d-fd41f7c691f7"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerRotation3"",
                    ""type"": ""Value"",
                    ""id"": ""c09646f8-5b6d-4bd1-8446-9b908300b32a"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerRotation4"",
                    ""type"": ""Value"",
                    ""id"": ""dd85844a-59f0-4ce4-a204-6f86d8703492"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerMenu0"",
                    ""type"": ""Value"",
                    ""id"": ""8f77f896-5a64-4d49-ad7b-eaae27c2f6f0"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerMenu1"",
                    ""type"": ""Value"",
                    ""id"": ""335a3b8f-f2db-4407-bfc0-da7f2fa3df67"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerMenu2"",
                    ""type"": ""Value"",
                    ""id"": ""d00902cb-dd6e-4cc1-b9e6-458620d7cc54"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerMenu3"",
                    ""type"": ""Value"",
                    ""id"": ""e65b347f-7c86-4c2c-9fa7-6cb8a98396bb"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerMenu4"",
                    ""type"": ""Value"",
                    ""id"": ""32290454-3d49-4abe-8e96-5ea4be4b98b7"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerGripPress0"",
                    ""type"": ""Value"",
                    ""id"": ""b799c225-3106-430b-a52f-423665a86de6"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerGripPress1"",
                    ""type"": ""Value"",
                    ""id"": ""b5df54f8-713d-4334-86c3-06d30ddf1cf7"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerGripPress2"",
                    ""type"": ""Value"",
                    ""id"": ""1b759bf8-9d5b-4b49-8316-ddfaf8fc68ec"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerGripPress3"",
                    ""type"": ""Value"",
                    ""id"": ""40f863d6-48ec-4367-bb85-4c62262d0aea"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerGripPress4"",
                    ""type"": ""Value"",
                    ""id"": ""d50f398e-1f91-472e-953c-eb0f624f0e1a"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerTriggerPress0"",
                    ""type"": ""Value"",
                    ""id"": ""c6435c4b-ab53-4cc1-a945-a720ae99d8ca"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerTriggerPress1"",
                    ""type"": ""Value"",
                    ""id"": ""1229385c-e160-496c-973f-1423c7dde8a8"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerTriggerPress2"",
                    ""type"": ""Value"",
                    ""id"": ""15e5038f-f4ad-4e1a-b512-62d7dc4f39ae"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerTriggerPress3"",
                    ""type"": ""Value"",
                    ""id"": ""62b71c61-288c-4cc4-b78c-4de93d6206ce"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerTriggerPress4"",
                    ""type"": ""Value"",
                    ""id"": ""2f36800f-6190-430d-bc37-54bc6dcaae89"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerTrackpadPress0"",
                    ""type"": ""Value"",
                    ""id"": ""b393b33c-c624-496f-b087-68a407d8dc3d"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerTrackpadPress1"",
                    ""type"": ""Value"",
                    ""id"": ""549461b6-6064-422b-8c9d-87d57129c8f5"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerTrackpadPress2"",
                    ""type"": ""Value"",
                    ""id"": ""4bcb74b3-99f9-4b81-817e-805ac4675e32"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerTrackpadPress3"",
                    ""type"": ""Value"",
                    ""id"": ""a6553326-7a96-4a7a-958e-e670749fef33"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerTrackpadPress4"",
                    ""type"": ""Value"",
                    ""id"": ""23554d75-900e-4a22-bb1a-c04cc2a78f27"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerTrackpadTouch0"",
                    ""type"": ""Value"",
                    ""id"": ""41f153d7-9dc6-48b4-bb62-076e5b46a740"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerTrackpadTouch1"",
                    ""type"": ""Value"",
                    ""id"": ""a045f5d5-b5c5-4c56-93f5-0311b25bcd32"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerTrackpadTouch2"",
                    ""type"": ""Value"",
                    ""id"": ""b675bf25-23fa-4f40-886e-fb326b157bd6"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerTrackpadTouch3"",
                    ""type"": ""Value"",
                    ""id"": ""f696b7b9-41e4-4995-9294-36ed4e7a2153"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UltimateTrackerTrackpadTouch4"",
                    ""type"": ""Value"",
                    ""id"": ""15f5f500-391b-4f84-a26f-a1c32aa3cc7b"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""68a2aa5b-0a25-4b2f-94bc-81b14e331f0c"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 0}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerIsTracked0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4221dc5e-541a-4dad-9bc8-3a0e6224fbda"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 1}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerIsTracked1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91b6fa8c-dd62-4705-a691-2fa0d396ab01"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 2}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerIsTracked2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ea8fd43-0d92-4830-89fb-4d92fdce420d"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 3}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerIsTracked3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c1ad520-b2ed-4e44-a4ff-11d1adc578d7"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 4}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerIsTracked4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c976786-851c-43d0-b7ba-f0c765d4f7f0"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 0}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerTrackingState0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eacf509c-9b24-4178-8dd5-88924973ee50"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 1}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerTrackingState1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6851e6f-b001-4a44-9d91-1238c509e92e"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 2}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerTrackingState2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7cd38fe1-8d48-4a42-bcd0-1bd13a1351e6"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 3}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerTrackingState3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""180e3750-8b45-4f39-b586-171076f90507"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 4}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerTrackingState4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3cd46c97-a668-4ab6-b747-2a664cb144d7"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 0}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerPosition0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48a438e1-c0e4-4087-aea2-b1900896e2cb"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 1}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerPosition1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5b8bad8-26d8-497b-adce-26d3fdd17afe"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 2}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerPosition2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f7ec0df-3dd6-4f79-82d1-1ca8bf8ec49c"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 3}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerPosition3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29e32062-4f12-450b-9feb-2ee58f364cea"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 4}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerPosition4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fa434d7-6ddf-41f2-a566-df291b1436f5"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 0}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerRotation0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eead5a12-fe83-4a68-a57e-31c72b85f721"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 1}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerRotation1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e96bd289-8b24-4463-abe3-f22c532a8903"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 2}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerRotation2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19aa05c9-678d-456b-87d1-8a135b96f381"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 3}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerRotation3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85a5100c-f9a3-47ee-950b-5c9dde6e1f3c"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 4}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerRotation4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31a54eba-9c9e-4128-aa94-0e5efda8dc78"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 0}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerMenu0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8727aa5e-0f42-49e6-a50e-8e11cfaa9640"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 1}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerMenu1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64c8b951-e1b6-4be6-8c66-3cac332afbe2"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 2}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerMenu2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c663aa0-8fb8-4df2-9da8-fa6264efad2c"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 3}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerMenu3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96450792-f437-4c33-a6e8-5119f71c4549"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 4}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerMenu4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""105b83d8-c313-4850-8199-1ccf8ea905b8"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 0}/gripPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerGripPress0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5a417c5-f0b1-4809-becb-84c2f2c53046"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 1}/gripPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerGripPress1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98fde81d-1b07-4584-9eff-c2bb25e352f9"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 2}/gripPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerGripPress2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4285ce46-ba55-4a5f-8b20-e7bac73f89ef"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 3}/gripPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerGripPress3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b69edc9-3b89-4c4c-8c97-a5c025278693"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 4}/gripPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerGripPress4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""743cbb38-1468-4bfa-8d1d-cdb2294d5a72"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 0}/triggerPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerTriggerPress0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""292c4f1d-dfe0-4dbc-bfb2-eb5575594de4"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 1}/triggerPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerTriggerPress1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ddca843-64ec-421e-8aff-d8f78f57bebd"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 2}/triggerPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerTriggerPress2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78646995-4899-4558-9a1f-1979068f829a"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 3}/triggerPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerTriggerPress3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c12f924-33a9-42e8-90a0-f51f3ec91fff"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 1}/trackpadPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerTrackpadPress1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d6080d2-c0fb-42cf-ae57-ae70df3ee57b"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 2}/trackpadPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerTrackpadPress2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b20ef86-f77d-4085-a887-3291d20bab51"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 3}/trackpadPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerTrackpadPress3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc9d8be0-fed5-4f9a-9114-edb138d3a1d8"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 0}/trackpadTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerTrackpadTouch0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""972cdde2-fb30-4e8c-9587-f708b1aa3b5f"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 1}/trackpadTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerTrackpadTouch1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""509637b8-398c-4fb7-b568-d82639942760"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 2}/trackpadTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerTrackpadTouch2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75947ef4-fb27-4512-a94d-36ca3f60aa8b"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 3}/trackpadTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerTrackpadTouch3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9cc15507-e3eb-43b8-ac70-fba559364622"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 4}/trackpadTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerTrackpadTouch4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2f37016-ec45-4faa-bc5e-580636e110d7"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 4}/triggerPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerTriggerPress4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4bfbbd1e-d26e-46df-af16-1544a6bcd1ac"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 0}/trackpadPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerTrackpadPress0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53da7544-f689-4b0e-a8d5-e6754555c9db"",
                    ""path"": ""<ViveXRTracker>{Ultimate Tracker 4}/trackpadPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateTrackerTrackpadPress4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ViveTracker"",
            ""id"": ""2d526bb3-c870-48e3-a549-00c1fd2bf5f4"",
            ""actions"": [
                {
                    ""name"": ""LeftFootPosition"",
                    ""type"": ""Value"",
                    ""id"": ""1e636c45-bd1f-4e14-95cc-fcd485943330"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftFootRotation"",
                    ""type"": ""Value"",
                    ""id"": ""55e4fad0-3580-4683-98de-0e207ccca408"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightFootPosition"",
                    ""type"": ""Value"",
                    ""id"": ""b7e552f0-5497-493d-9696-ad5829a2a6f2"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightFootRotation"",
                    ""type"": ""Value"",
                    ""id"": ""98b18bad-1d18-43f9-9dc5-e4021994c482"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftShoulderPosition"",
                    ""type"": ""Value"",
                    ""id"": ""4d3257d7-17eb-4aa2-9079-3b769661c78f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftShoulderRotation"",
                    ""type"": ""Value"",
                    ""id"": ""f9598bb0-d291-41f3-8da4-5725159f6659"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightShoulderPosition"",
                    ""type"": ""Value"",
                    ""id"": ""85572d6a-5f05-4a9c-8a90-acb18ea38c8d"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightShoulderRotation"",
                    ""type"": ""Value"",
                    ""id"": ""8080f6d2-ec00-4866-b8bb-19388ea1a39c"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftElbowPosition"",
                    ""type"": ""Value"",
                    ""id"": ""8e9bf560-0f3d-482d-a81e-90b1436fa678"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftElbowRotation"",
                    ""type"": ""Value"",
                    ""id"": ""da9b04f8-c382-4ce8-b56c-4c344674e207"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightElbowPosition"",
                    ""type"": ""Value"",
                    ""id"": ""cf7499e7-66c1-4784-92e6-776a4a94d694"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightElbowRotation"",
                    ""type"": ""Value"",
                    ""id"": ""cc8adc2f-6d24-424b-a70f-04fbb016be09"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftKneePosition"",
                    ""type"": ""Value"",
                    ""id"": ""ecf9f330-95ed-4d2d-a766-5e37fa9a707d"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftKneeRotation"",
                    ""type"": ""Value"",
                    ""id"": ""a44c0e40-ca7c-43c7-b284-21f6c2a63480"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightKneePosition"",
                    ""type"": ""Value"",
                    ""id"": ""c51c13bc-e260-4126-b9ce-09fad7ee4eae"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightKneeRotation"",
                    ""type"": ""Value"",
                    ""id"": ""6a9c8439-db66-4ecc-9f14-6a8f127da131"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WaistPosition"",
                    ""type"": ""Value"",
                    ""id"": ""30f078cf-38fe-4476-80fa-37b4f0de1b6f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WaistRotation"",
                    ""type"": ""Value"",
                    ""id"": ""31479e4e-0139-4825-ae25-3b3d5c9d503e"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChestPosition"",
                    ""type"": ""Value"",
                    ""id"": ""05ee5b09-2a9e-446f-949e-5c952b4c06c4"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChestRotation"",
                    ""type"": ""Value"",
                    ""id"": ""d3c0702b-907b-45d6-9692-ec007626120c"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraPosition"",
                    ""type"": ""Value"",
                    ""id"": ""18724771-01de-49a7-8e76-deadaf59847f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraRotation"",
                    ""type"": ""Value"",
                    ""id"": ""94a74d55-2b74-409d-8530-7f3ff32ce214"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""KeyboardPosition"",
                    ""type"": ""Value"",
                    ""id"": ""fbb72cbf-6e51-4b47-aa74-77c8d1df178a"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""KeyboardRotation"",
                    ""type"": ""Value"",
                    ""id"": ""e657b44d-6846-4cdc-a0c2-49b587bbc87a"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9ce39e1c-27b7-48d0-a481-f1bee91f2dd8"",
                    ""path"": ""<XRViveTracker>{Left Foot}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftFootPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1194177-f841-487e-ac2c-a67ee0af439d"",
                    ""path"": ""<XRViveTracker>{Left Foot}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftFootRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f57a0b1-95aa-4af4-aa08-370729cf1a73"",
                    ""path"": ""<XRViveTracker>{Right Foot}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightFootPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57d4072c-7cd7-4836-bac7-7bf0effbdf43"",
                    ""path"": ""<XRViveTracker>{Right Foot}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightFootRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a4bdd9a-0121-4cd5-ae0b-a19c8192b98f"",
                    ""path"": ""<XRViveTracker>{Left Shoulder}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftShoulderPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86aef392-6bce-4796-a64f-e0e7f0e108dd"",
                    ""path"": ""<XRViveTracker>{Left Shoulder}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftShoulderRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""001e0422-7376-4eb0-ae9f-3e20c39f919d"",
                    ""path"": ""<XRViveTracker>{Right Shoulder}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightShoulderPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c82a9066-aa42-42b9-be5c-575713238f1a"",
                    ""path"": ""<XRViveTracker>{Right Shoulder}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightShoulderRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1910b26-982c-43d7-b370-3d118ca42028"",
                    ""path"": ""<XRViveTracker>{Left Elbow}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftElbowPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""842f3215-f98b-4ba1-81c2-3219d5017e70"",
                    ""path"": ""<XRViveTracker>{Left Elbow}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftElbowRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95e5c25c-a508-4053-b9c1-116d41807383"",
                    ""path"": ""<XRViveTracker>{Right Elbow}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightElbowPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e95dc28-99cf-45cd-8bab-dadb1b63ffbe"",
                    ""path"": ""<XRViveTracker>{Right Elbow}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightElbowRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e57be07d-daca-402a-8239-f39fd80e826a"",
                    ""path"": ""<XRViveTracker>{Left Knee}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftKneePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee6d8b85-ecf6-4e76-a801-0cf6f501d57b"",
                    ""path"": ""<XRViveTracker>{Left Knee}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftKneeRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9239af7-d02c-45f0-bcd7-9d0207789dcf"",
                    ""path"": ""<XRViveTracker>{Right Knee}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightKneePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a80e6bb9-edf2-43e8-b107-f67547aef996"",
                    ""path"": ""<XRViveTracker>{Right Knee}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightKneeRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0f6fa2a-04b6-46b3-81f8-7b227ceacb83"",
                    ""path"": ""<XRViveTracker>{Waist}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WaistPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fdfdae21-2dde-401f-9f89-79d7d9648196"",
                    ""path"": ""<XRViveTracker>{Waist}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WaistRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6549a656-ee99-47a4-b2e8-b4ff1bc8832c"",
                    ""path"": ""<XRViveTracker>{Chest}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChestPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f44beb2-2d5a-4108-bda4-e24363e460e9"",
                    ""path"": ""<XRViveTracker>{Chest}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChestRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0713f4ca-4413-4460-b9c8-d7a2ce41a982"",
                    ""path"": ""<XRViveTracker>{Camera}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5abcde4-244a-45f8-9c40-95e04d80a1f7"",
                    ""path"": ""<XRViveTracker>{Camera}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a844fbd4-86ac-43d3-9112-40537e321b25"",
                    ""path"": ""<XRViveTracker>{Keyboard}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6badc121-5e7f-4ac2-8827-ad63f1b0f07d"",
                    ""path"": ""<XRViveTracker>{Keyboard}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""XR Usage"",
            ""bindingGroup"": ""XR Usage"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // LeftHand
        m_LeftHand = asset.FindActionMap("LeftHand", throwIfNotFound: true);
        m_LeftHand_TriggerPress = m_LeftHand.FindAction("TriggerPress", throwIfNotFound: true);
        m_LeftHand_TriggerTouch = m_LeftHand.FindAction("TriggerTouch", throwIfNotFound: true);
        m_LeftHand_Trigger = m_LeftHand.FindAction("Trigger", throwIfNotFound: true);
        m_LeftHand_PrimaryButton = m_LeftHand.FindAction("PrimaryButton", throwIfNotFound: true);
        m_LeftHand_PrimaryTouch = m_LeftHand.FindAction("PrimaryTouch", throwIfNotFound: true);
        m_LeftHand_Menu = m_LeftHand.FindAction("Menu", throwIfNotFound: true);
        m_LeftHand_Primary2DAxis = m_LeftHand.FindAction("Primary2DAxis", throwIfNotFound: true);
        m_LeftHand_Primary2DAxisClick = m_LeftHand.FindAction("Primary2DAxisClick", throwIfNotFound: true);
        m_LeftHand_Primary2DAxisTouch = m_LeftHand.FindAction("Primary2DAxisTouch", throwIfNotFound: true);
        m_LeftHand_Secondary2DAxis = m_LeftHand.FindAction("Secondary2DAxis", throwIfNotFound: true);
        m_LeftHand_Secondary2DAxisClick = m_LeftHand.FindAction("Secondary2DAxisClick", throwIfNotFound: true);
        m_LeftHand_Secondary2DAxisTouch = m_LeftHand.FindAction("Secondary2DAxisTouch", throwIfNotFound: true);
        m_LeftHand_Grip = m_LeftHand.FindAction("Grip", throwIfNotFound: true);
        m_LeftHand_GripPress = m_LeftHand.FindAction("GripPress", throwIfNotFound: true);
        m_LeftHand_SecondaryButton = m_LeftHand.FindAction("SecondaryButton", throwIfNotFound: true);
        m_LeftHand_SecondaryTouch = m_LeftHand.FindAction("SecondaryTouch", throwIfNotFound: true);
        m_LeftHand_PointerPosition = m_LeftHand.FindAction("PointerPosition", throwIfNotFound: true);
        m_LeftHand_PointerRotation = m_LeftHand.FindAction("PointerRotation", throwIfNotFound: true);
        m_LeftHand_GripPosition = m_LeftHand.FindAction("GripPosition", throwIfNotFound: true);
        m_LeftHand_GripRotation = m_LeftHand.FindAction("GripRotation", throwIfNotFound: true);
        m_LeftHand_Haptic = m_LeftHand.FindAction("Haptic", throwIfNotFound: true);
        m_LeftHand_PokePosition = m_LeftHand.FindAction("PokePosition", throwIfNotFound: true);
        m_LeftHand_PokeRotation = m_LeftHand.FindAction("PokeRotation", throwIfNotFound: true);
        m_LeftHand_PinchPosition = m_LeftHand.FindAction("PinchPosition", throwIfNotFound: true);
        m_LeftHand_PinchRotation = m_LeftHand.FindAction("PinchRotation", throwIfNotFound: true);
        m_LeftHand_PinchValue = m_LeftHand.FindAction("PinchValue", throwIfNotFound: true);
        m_LeftHand_PinchReady = m_LeftHand.FindAction("PinchReady", throwIfNotFound: true);
        m_LeftHand_PointerActivate = m_LeftHand.FindAction("PointerActivate", throwIfNotFound: true);
        m_LeftHand_PointerActivateReady = m_LeftHand.FindAction("PointerActivateReady", throwIfNotFound: true);
        m_LeftHand_GraspValue = m_LeftHand.FindAction("GraspValue", throwIfNotFound: true);
        m_LeftHand_GraspReady = m_LeftHand.FindAction("GraspReady", throwIfNotFound: true);
        m_LeftHand_PalmPosePosition = m_LeftHand.FindAction("PalmPosePosition", throwIfNotFound: true);
        m_LeftHand_PalmPoseRotation = m_LeftHand.FindAction("PalmPoseRotation", throwIfNotFound: true);
        m_LeftHand_PinchPose = m_LeftHand.FindAction("PinchPose", throwIfNotFound: true);
        m_LeftHand_PokePose = m_LeftHand.FindAction("PokePose", throwIfNotFound: true);
        m_LeftHand_PalmPose = m_LeftHand.FindAction("PalmPose", throwIfNotFound: true);
        m_LeftHand_GripPose = m_LeftHand.FindAction("GripPose", throwIfNotFound: true);
        m_LeftHand_AimPose = m_LeftHand.FindAction("AimPose", throwIfNotFound: true);
        m_LeftHand_IsTracked = m_LeftHand.FindAction("IsTracked", throwIfNotFound: true);
        m_LeftHand_TrackingState = m_LeftHand.FindAction("TrackingState", throwIfNotFound: true);
        m_LeftHand_GripTouch = m_LeftHand.FindAction("GripTouch", throwIfNotFound: true);
        m_LeftHand_ThumbrestTouched = m_LeftHand.FindAction("ThumbrestTouched", throwIfNotFound: true);
        // RightHand
        m_RightHand = asset.FindActionMap("RightHand", throwIfNotFound: true);
        m_RightHand_TriggerPress = m_RightHand.FindAction("TriggerPress", throwIfNotFound: true);
        m_RightHand_TriggerTouch = m_RightHand.FindAction("TriggerTouch", throwIfNotFound: true);
        m_RightHand_Trigger = m_RightHand.FindAction("Trigger", throwIfNotFound: true);
        m_RightHand_PrimaryButton = m_RightHand.FindAction("PrimaryButton", throwIfNotFound: true);
        m_RightHand_PrimaryTouch = m_RightHand.FindAction("PrimaryTouch", throwIfNotFound: true);
        m_RightHand_Menu = m_RightHand.FindAction("Menu", throwIfNotFound: true);
        m_RightHand_Primary2DAxis = m_RightHand.FindAction("Primary2DAxis", throwIfNotFound: true);
        m_RightHand_Primary2DAxisClick = m_RightHand.FindAction("Primary2DAxisClick", throwIfNotFound: true);
        m_RightHand_Primary2DAxisTouch = m_RightHand.FindAction("Primary2DAxisTouch", throwIfNotFound: true);
        m_RightHand_Secondary2DAxis = m_RightHand.FindAction("Secondary2DAxis", throwIfNotFound: true);
        m_RightHand_Secondary2DAxisClick = m_RightHand.FindAction("Secondary2DAxisClick", throwIfNotFound: true);
        m_RightHand_Secondary2DAxisTouch = m_RightHand.FindAction("Secondary2DAxisTouch", throwIfNotFound: true);
        m_RightHand_Grip = m_RightHand.FindAction("Grip", throwIfNotFound: true);
        m_RightHand_GripPress = m_RightHand.FindAction("GripPress", throwIfNotFound: true);
        m_RightHand_SecondaryButton = m_RightHand.FindAction("SecondaryButton", throwIfNotFound: true);
        m_RightHand_SecondaryTouch = m_RightHand.FindAction("SecondaryTouch", throwIfNotFound: true);
        m_RightHand_PointerPosition = m_RightHand.FindAction("PointerPosition", throwIfNotFound: true);
        m_RightHand_PointerRotation = m_RightHand.FindAction("PointerRotation", throwIfNotFound: true);
        m_RightHand_GripPosition = m_RightHand.FindAction("GripPosition", throwIfNotFound: true);
        m_RightHand_GripRotation = m_RightHand.FindAction("GripRotation", throwIfNotFound: true);
        m_RightHand_Haptic = m_RightHand.FindAction("Haptic", throwIfNotFound: true);
        m_RightHand_PokePosition = m_RightHand.FindAction("PokePosition", throwIfNotFound: true);
        m_RightHand_PokeRotation = m_RightHand.FindAction("PokeRotation", throwIfNotFound: true);
        m_RightHand_PinchPosition = m_RightHand.FindAction("PinchPosition", throwIfNotFound: true);
        m_RightHand_PinchRotation = m_RightHand.FindAction("PinchRotation", throwIfNotFound: true);
        m_RightHand_PinchValue = m_RightHand.FindAction("PinchValue", throwIfNotFound: true);
        m_RightHand_PinchReady = m_RightHand.FindAction("PinchReady", throwIfNotFound: true);
        m_RightHand_PointerActivate = m_RightHand.FindAction("PointerActivate", throwIfNotFound: true);
        m_RightHand_PointerActivateReady = m_RightHand.FindAction("PointerActivateReady", throwIfNotFound: true);
        m_RightHand_GraspValue = m_RightHand.FindAction("GraspValue", throwIfNotFound: true);
        m_RightHand_GraspReady = m_RightHand.FindAction("GraspReady", throwIfNotFound: true);
        m_RightHand_PalmPosePosition = m_RightHand.FindAction("PalmPosePosition", throwIfNotFound: true);
        m_RightHand_PalmPoseRotation = m_RightHand.FindAction("PalmPoseRotation", throwIfNotFound: true);
        m_RightHand_PinchPose = m_RightHand.FindAction("PinchPose", throwIfNotFound: true);
        m_RightHand_PokePose = m_RightHand.FindAction("PokePose", throwIfNotFound: true);
        m_RightHand_PalmPose = m_RightHand.FindAction("PalmPose", throwIfNotFound: true);
        m_RightHand_GripPose = m_RightHand.FindAction("GripPose", throwIfNotFound: true);
        m_RightHand_AimPose = m_RightHand.FindAction("AimPose", throwIfNotFound: true);
        m_RightHand_IsTracked = m_RightHand.FindAction("IsTracked", throwIfNotFound: true);
        m_RightHand_TrackingState = m_RightHand.FindAction("TrackingState", throwIfNotFound: true);
        m_RightHand_GripTouch = m_RightHand.FindAction("GripTouch", throwIfNotFound: true);
        m_RightHand_ThumbrestTouched = m_RightHand.FindAction("ThumbrestTouched", throwIfNotFound: true);
        // HMD
        m_HMD = asset.FindActionMap("HMD", throwIfNotFound: true);
        m_HMD_hmdPosition = m_HMD.FindAction("hmdPosition", throwIfNotFound: true);
        m_HMD_hmdRotation = m_HMD.FindAction("hmdRotation", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
        m_UI_pointerPosition = m_UI.FindAction("pointerPosition", throwIfNotFound: true);
        m_UI_pointerRotation = m_UI.FindAction("pointerRotation", throwIfNotFound: true);
        m_UI_Down = m_UI.FindAction("Down", throwIfNotFound: true);
        // EyeGaze
        m_EyeGaze = asset.FindActionMap("EyeGaze", throwIfNotFound: true);
        m_EyeGaze_Tracked = m_EyeGaze.FindAction("Tracked", throwIfNotFound: true);
        m_EyeGaze_EyePosition = m_EyeGaze.FindAction("EyePosition", throwIfNotFound: true);
        m_EyeGaze_EyeRotation = m_EyeGaze.FindAction("EyeRotation", throwIfNotFound: true);
        m_EyeGaze_EyePose = m_EyeGaze.FindAction("EyePose", throwIfNotFound: true);
        // LeftHandInteraction
        m_LeftHandInteraction = asset.FindActionMap("LeftHandInteraction", throwIfNotFound: true);
        m_LeftHandInteraction_GripValue = m_LeftHandInteraction.FindAction("GripValue", throwIfNotFound: true);
        m_LeftHandInteraction_SelectValue = m_LeftHandInteraction.FindAction("SelectValue", throwIfNotFound: true);
        m_LeftHandInteraction_IsTracked = m_LeftHandInteraction.FindAction("IsTracked", throwIfNotFound: true);
        m_LeftHandInteraction_TrackingState = m_LeftHandInteraction.FindAction("TrackingState", throwIfNotFound: true);
        m_LeftHandInteraction_DevicePose = m_LeftHandInteraction.FindAction("DevicePose", throwIfNotFound: true);
        m_LeftHandInteraction_DevicePosition = m_LeftHandInteraction.FindAction("DevicePosition", throwIfNotFound: true);
        m_LeftHandInteraction_DeviceRotation = m_LeftHandInteraction.FindAction("DeviceRotation", throwIfNotFound: true);
        m_LeftHandInteraction_Pointer = m_LeftHandInteraction.FindAction("Pointer", throwIfNotFound: true);
        // RightHandInteraction
        m_RightHandInteraction = asset.FindActionMap("RightHandInteraction", throwIfNotFound: true);
        m_RightHandInteraction_GripValue = m_RightHandInteraction.FindAction("GripValue", throwIfNotFound: true);
        m_RightHandInteraction_SelectValue = m_RightHandInteraction.FindAction("SelectValue", throwIfNotFound: true);
        m_RightHandInteraction_IsTracked = m_RightHandInteraction.FindAction("IsTracked", throwIfNotFound: true);
        m_RightHandInteraction_TrackingState = m_RightHandInteraction.FindAction("TrackingState", throwIfNotFound: true);
        m_RightHandInteraction_DevicePose = m_RightHandInteraction.FindAction("DevicePose", throwIfNotFound: true);
        m_RightHandInteraction_DevicePosition = m_RightHandInteraction.FindAction("DevicePosition", throwIfNotFound: true);
        m_RightHandInteraction_DeviceRotation = m_RightHandInteraction.FindAction("DeviceRotation", throwIfNotFound: true);
        m_RightHandInteraction_Pointer = m_RightHandInteraction.FindAction("Pointer", throwIfNotFound: true);
        // LeftWristTracker
        m_LeftWristTracker = asset.FindActionMap("LeftWristTracker", throwIfNotFound: true);
        m_LeftWristTracker_IsTracked = m_LeftWristTracker.FindAction("IsTracked", throwIfNotFound: true);
        m_LeftWristTracker_TrackingState = m_LeftWristTracker.FindAction("TrackingState", throwIfNotFound: true);
        m_LeftWristTracker_DevicePose = m_LeftWristTracker.FindAction("DevicePose", throwIfNotFound: true);
        m_LeftWristTracker_DevicePosition = m_LeftWristTracker.FindAction("DevicePosition", throwIfNotFound: true);
        m_LeftWristTracker_DeviceRotation = m_LeftWristTracker.FindAction("DeviceRotation", throwIfNotFound: true);
        m_LeftWristTracker_PrimaryButton = m_LeftWristTracker.FindAction("PrimaryButton", throwIfNotFound: true);
        m_LeftWristTracker_Menu = m_LeftWristTracker.FindAction("Menu", throwIfNotFound: true);
        // RightWristTracker
        m_RightWristTracker = asset.FindActionMap("RightWristTracker", throwIfNotFound: true);
        m_RightWristTracker_IsTracked = m_RightWristTracker.FindAction("IsTracked", throwIfNotFound: true);
        m_RightWristTracker_TrackingState = m_RightWristTracker.FindAction("TrackingState", throwIfNotFound: true);
        m_RightWristTracker_DevicePose = m_RightWristTracker.FindAction("DevicePose", throwIfNotFound: true);
        m_RightWristTracker_DevicePosition = m_RightWristTracker.FindAction("DevicePosition", throwIfNotFound: true);
        m_RightWristTracker_DeviceRotation = m_RightWristTracker.FindAction("DeviceRotation", throwIfNotFound: true);
        m_RightWristTracker_PrimaryButton = m_RightWristTracker.FindAction("PrimaryButton", throwIfNotFound: true);
        m_RightWristTracker_Menu = m_RightWristTracker.FindAction("Menu", throwIfNotFound: true);
        // XRTracker
        m_XRTracker = asset.FindActionMap("XRTracker", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerIsTracked0 = m_XRTracker.FindAction("UltimateTrackerIsTracked0", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerIsTracked1 = m_XRTracker.FindAction("UltimateTrackerIsTracked1", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerIsTracked2 = m_XRTracker.FindAction("UltimateTrackerIsTracked2", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerIsTracked3 = m_XRTracker.FindAction("UltimateTrackerIsTracked3", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerIsTracked4 = m_XRTracker.FindAction("UltimateTrackerIsTracked4", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerTrackingState0 = m_XRTracker.FindAction("UltimateTrackerTrackingState0", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerTrackingState1 = m_XRTracker.FindAction("UltimateTrackerTrackingState1", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerTrackingState2 = m_XRTracker.FindAction("UltimateTrackerTrackingState2", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerTrackingState3 = m_XRTracker.FindAction("UltimateTrackerTrackingState3", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerTrackingState4 = m_XRTracker.FindAction("UltimateTrackerTrackingState4", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerPosition0 = m_XRTracker.FindAction("UltimateTrackerPosition0", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerPosition1 = m_XRTracker.FindAction("UltimateTrackerPosition1", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerPosition2 = m_XRTracker.FindAction("UltimateTrackerPosition2", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerPosition3 = m_XRTracker.FindAction("UltimateTrackerPosition3", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerPosition4 = m_XRTracker.FindAction("UltimateTrackerPosition4", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerRotation0 = m_XRTracker.FindAction("UltimateTrackerRotation0", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerRotation1 = m_XRTracker.FindAction("UltimateTrackerRotation1", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerRotation2 = m_XRTracker.FindAction("UltimateTrackerRotation2", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerRotation3 = m_XRTracker.FindAction("UltimateTrackerRotation3", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerRotation4 = m_XRTracker.FindAction("UltimateTrackerRotation4", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerMenu0 = m_XRTracker.FindAction("UltimateTrackerMenu0", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerMenu1 = m_XRTracker.FindAction("UltimateTrackerMenu1", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerMenu2 = m_XRTracker.FindAction("UltimateTrackerMenu2", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerMenu3 = m_XRTracker.FindAction("UltimateTrackerMenu3", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerMenu4 = m_XRTracker.FindAction("UltimateTrackerMenu4", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerGripPress0 = m_XRTracker.FindAction("UltimateTrackerGripPress0", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerGripPress1 = m_XRTracker.FindAction("UltimateTrackerGripPress1", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerGripPress2 = m_XRTracker.FindAction("UltimateTrackerGripPress2", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerGripPress3 = m_XRTracker.FindAction("UltimateTrackerGripPress3", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerGripPress4 = m_XRTracker.FindAction("UltimateTrackerGripPress4", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerTriggerPress0 = m_XRTracker.FindAction("UltimateTrackerTriggerPress0", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerTriggerPress1 = m_XRTracker.FindAction("UltimateTrackerTriggerPress1", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerTriggerPress2 = m_XRTracker.FindAction("UltimateTrackerTriggerPress2", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerTriggerPress3 = m_XRTracker.FindAction("UltimateTrackerTriggerPress3", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerTriggerPress4 = m_XRTracker.FindAction("UltimateTrackerTriggerPress4", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerTrackpadPress0 = m_XRTracker.FindAction("UltimateTrackerTrackpadPress0", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerTrackpadPress1 = m_XRTracker.FindAction("UltimateTrackerTrackpadPress1", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerTrackpadPress2 = m_XRTracker.FindAction("UltimateTrackerTrackpadPress2", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerTrackpadPress3 = m_XRTracker.FindAction("UltimateTrackerTrackpadPress3", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerTrackpadPress4 = m_XRTracker.FindAction("UltimateTrackerTrackpadPress4", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerTrackpadTouch0 = m_XRTracker.FindAction("UltimateTrackerTrackpadTouch0", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerTrackpadTouch1 = m_XRTracker.FindAction("UltimateTrackerTrackpadTouch1", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerTrackpadTouch2 = m_XRTracker.FindAction("UltimateTrackerTrackpadTouch2", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerTrackpadTouch3 = m_XRTracker.FindAction("UltimateTrackerTrackpadTouch3", throwIfNotFound: true);
        m_XRTracker_UltimateTrackerTrackpadTouch4 = m_XRTracker.FindAction("UltimateTrackerTrackpadTouch4", throwIfNotFound: true);
        // ViveTracker
        m_ViveTracker = asset.FindActionMap("ViveTracker", throwIfNotFound: true);
        m_ViveTracker_LeftFootPosition = m_ViveTracker.FindAction("LeftFootPosition", throwIfNotFound: true);
        m_ViveTracker_LeftFootRotation = m_ViveTracker.FindAction("LeftFootRotation", throwIfNotFound: true);
        m_ViveTracker_RightFootPosition = m_ViveTracker.FindAction("RightFootPosition", throwIfNotFound: true);
        m_ViveTracker_RightFootRotation = m_ViveTracker.FindAction("RightFootRotation", throwIfNotFound: true);
        m_ViveTracker_LeftShoulderPosition = m_ViveTracker.FindAction("LeftShoulderPosition", throwIfNotFound: true);
        m_ViveTracker_LeftShoulderRotation = m_ViveTracker.FindAction("LeftShoulderRotation", throwIfNotFound: true);
        m_ViveTracker_RightShoulderPosition = m_ViveTracker.FindAction("RightShoulderPosition", throwIfNotFound: true);
        m_ViveTracker_RightShoulderRotation = m_ViveTracker.FindAction("RightShoulderRotation", throwIfNotFound: true);
        m_ViveTracker_LeftElbowPosition = m_ViveTracker.FindAction("LeftElbowPosition", throwIfNotFound: true);
        m_ViveTracker_LeftElbowRotation = m_ViveTracker.FindAction("LeftElbowRotation", throwIfNotFound: true);
        m_ViveTracker_RightElbowPosition = m_ViveTracker.FindAction("RightElbowPosition", throwIfNotFound: true);
        m_ViveTracker_RightElbowRotation = m_ViveTracker.FindAction("RightElbowRotation", throwIfNotFound: true);
        m_ViveTracker_LeftKneePosition = m_ViveTracker.FindAction("LeftKneePosition", throwIfNotFound: true);
        m_ViveTracker_LeftKneeRotation = m_ViveTracker.FindAction("LeftKneeRotation", throwIfNotFound: true);
        m_ViveTracker_RightKneePosition = m_ViveTracker.FindAction("RightKneePosition", throwIfNotFound: true);
        m_ViveTracker_RightKneeRotation = m_ViveTracker.FindAction("RightKneeRotation", throwIfNotFound: true);
        m_ViveTracker_WaistPosition = m_ViveTracker.FindAction("WaistPosition", throwIfNotFound: true);
        m_ViveTracker_WaistRotation = m_ViveTracker.FindAction("WaistRotation", throwIfNotFound: true);
        m_ViveTracker_ChestPosition = m_ViveTracker.FindAction("ChestPosition", throwIfNotFound: true);
        m_ViveTracker_ChestRotation = m_ViveTracker.FindAction("ChestRotation", throwIfNotFound: true);
        m_ViveTracker_CameraPosition = m_ViveTracker.FindAction("CameraPosition", throwIfNotFound: true);
        m_ViveTracker_CameraRotation = m_ViveTracker.FindAction("CameraRotation", throwIfNotFound: true);
        m_ViveTracker_KeyboardPosition = m_ViveTracker.FindAction("KeyboardPosition", throwIfNotFound: true);
        m_ViveTracker_KeyboardRotation = m_ViveTracker.FindAction("KeyboardRotation", throwIfNotFound: true);
    }

    ~@InputActions()
    {
        UnityEngine.Debug.Assert(!m_LeftHand.enabled, "This will cause a leak and performance issues, InputActions.LeftHand.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_RightHand.enabled, "This will cause a leak and performance issues, InputActions.RightHand.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_HMD.enabled, "This will cause a leak and performance issues, InputActions.HMD.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, InputActions.UI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_EyeGaze.enabled, "This will cause a leak and performance issues, InputActions.EyeGaze.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_LeftHandInteraction.enabled, "This will cause a leak and performance issues, InputActions.LeftHandInteraction.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_RightHandInteraction.enabled, "This will cause a leak and performance issues, InputActions.RightHandInteraction.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_LeftWristTracker.enabled, "This will cause a leak and performance issues, InputActions.LeftWristTracker.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_RightWristTracker.enabled, "This will cause a leak and performance issues, InputActions.RightWristTracker.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_XRTracker.enabled, "This will cause a leak and performance issues, InputActions.XRTracker.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_ViveTracker.enabled, "This will cause a leak and performance issues, InputActions.ViveTracker.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LeftHand
    private readonly InputActionMap m_LeftHand;
    private List<ILeftHandActions> m_LeftHandActionsCallbackInterfaces = new List<ILeftHandActions>();
    private readonly InputAction m_LeftHand_TriggerPress;
    private readonly InputAction m_LeftHand_TriggerTouch;
    private readonly InputAction m_LeftHand_Trigger;
    private readonly InputAction m_LeftHand_PrimaryButton;
    private readonly InputAction m_LeftHand_PrimaryTouch;
    private readonly InputAction m_LeftHand_Menu;
    private readonly InputAction m_LeftHand_Primary2DAxis;
    private readonly InputAction m_LeftHand_Primary2DAxisClick;
    private readonly InputAction m_LeftHand_Primary2DAxisTouch;
    private readonly InputAction m_LeftHand_Secondary2DAxis;
    private readonly InputAction m_LeftHand_Secondary2DAxisClick;
    private readonly InputAction m_LeftHand_Secondary2DAxisTouch;
    private readonly InputAction m_LeftHand_Grip;
    private readonly InputAction m_LeftHand_GripPress;
    private readonly InputAction m_LeftHand_SecondaryButton;
    private readonly InputAction m_LeftHand_SecondaryTouch;
    private readonly InputAction m_LeftHand_PointerPosition;
    private readonly InputAction m_LeftHand_PointerRotation;
    private readonly InputAction m_LeftHand_GripPosition;
    private readonly InputAction m_LeftHand_GripRotation;
    private readonly InputAction m_LeftHand_Haptic;
    private readonly InputAction m_LeftHand_PokePosition;
    private readonly InputAction m_LeftHand_PokeRotation;
    private readonly InputAction m_LeftHand_PinchPosition;
    private readonly InputAction m_LeftHand_PinchRotation;
    private readonly InputAction m_LeftHand_PinchValue;
    private readonly InputAction m_LeftHand_PinchReady;
    private readonly InputAction m_LeftHand_PointerActivate;
    private readonly InputAction m_LeftHand_PointerActivateReady;
    private readonly InputAction m_LeftHand_GraspValue;
    private readonly InputAction m_LeftHand_GraspReady;
    private readonly InputAction m_LeftHand_PalmPosePosition;
    private readonly InputAction m_LeftHand_PalmPoseRotation;
    private readonly InputAction m_LeftHand_PinchPose;
    private readonly InputAction m_LeftHand_PokePose;
    private readonly InputAction m_LeftHand_PalmPose;
    private readonly InputAction m_LeftHand_GripPose;
    private readonly InputAction m_LeftHand_AimPose;
    private readonly InputAction m_LeftHand_IsTracked;
    private readonly InputAction m_LeftHand_TrackingState;
    private readonly InputAction m_LeftHand_GripTouch;
    private readonly InputAction m_LeftHand_ThumbrestTouched;
    /// <summary>
    /// Provides access to input actions defined in input action map "LeftHand".
    /// </summary>
    public struct LeftHandActions
    {
        private @InputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public LeftHandActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/TriggerPress".
        /// </summary>
        public InputAction @TriggerPress => m_Wrapper.m_LeftHand_TriggerPress;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/TriggerTouch".
        /// </summary>
        public InputAction @TriggerTouch => m_Wrapper.m_LeftHand_TriggerTouch;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/Trigger".
        /// </summary>
        public InputAction @Trigger => m_Wrapper.m_LeftHand_Trigger;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/PrimaryButton".
        /// </summary>
        public InputAction @PrimaryButton => m_Wrapper.m_LeftHand_PrimaryButton;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/PrimaryTouch".
        /// </summary>
        public InputAction @PrimaryTouch => m_Wrapper.m_LeftHand_PrimaryTouch;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/Menu".
        /// </summary>
        public InputAction @Menu => m_Wrapper.m_LeftHand_Menu;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/Primary2DAxis".
        /// </summary>
        public InputAction @Primary2DAxis => m_Wrapper.m_LeftHand_Primary2DAxis;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/Primary2DAxisClick".
        /// </summary>
        public InputAction @Primary2DAxisClick => m_Wrapper.m_LeftHand_Primary2DAxisClick;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/Primary2DAxisTouch".
        /// </summary>
        public InputAction @Primary2DAxisTouch => m_Wrapper.m_LeftHand_Primary2DAxisTouch;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/Secondary2DAxis".
        /// </summary>
        public InputAction @Secondary2DAxis => m_Wrapper.m_LeftHand_Secondary2DAxis;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/Secondary2DAxisClick".
        /// </summary>
        public InputAction @Secondary2DAxisClick => m_Wrapper.m_LeftHand_Secondary2DAxisClick;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/Secondary2DAxisTouch".
        /// </summary>
        public InputAction @Secondary2DAxisTouch => m_Wrapper.m_LeftHand_Secondary2DAxisTouch;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/Grip".
        /// </summary>
        public InputAction @Grip => m_Wrapper.m_LeftHand_Grip;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/GripPress".
        /// </summary>
        public InputAction @GripPress => m_Wrapper.m_LeftHand_GripPress;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/SecondaryButton".
        /// </summary>
        public InputAction @SecondaryButton => m_Wrapper.m_LeftHand_SecondaryButton;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/SecondaryTouch".
        /// </summary>
        public InputAction @SecondaryTouch => m_Wrapper.m_LeftHand_SecondaryTouch;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/PointerPosition".
        /// </summary>
        public InputAction @PointerPosition => m_Wrapper.m_LeftHand_PointerPosition;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/PointerRotation".
        /// </summary>
        public InputAction @PointerRotation => m_Wrapper.m_LeftHand_PointerRotation;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/GripPosition".
        /// </summary>
        public InputAction @GripPosition => m_Wrapper.m_LeftHand_GripPosition;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/GripRotation".
        /// </summary>
        public InputAction @GripRotation => m_Wrapper.m_LeftHand_GripRotation;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/Haptic".
        /// </summary>
        public InputAction @Haptic => m_Wrapper.m_LeftHand_Haptic;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/PokePosition".
        /// </summary>
        public InputAction @PokePosition => m_Wrapper.m_LeftHand_PokePosition;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/PokeRotation".
        /// </summary>
        public InputAction @PokeRotation => m_Wrapper.m_LeftHand_PokeRotation;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/PinchPosition".
        /// </summary>
        public InputAction @PinchPosition => m_Wrapper.m_LeftHand_PinchPosition;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/PinchRotation".
        /// </summary>
        public InputAction @PinchRotation => m_Wrapper.m_LeftHand_PinchRotation;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/PinchValue".
        /// </summary>
        public InputAction @PinchValue => m_Wrapper.m_LeftHand_PinchValue;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/PinchReady".
        /// </summary>
        public InputAction @PinchReady => m_Wrapper.m_LeftHand_PinchReady;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/PointerActivate".
        /// </summary>
        public InputAction @PointerActivate => m_Wrapper.m_LeftHand_PointerActivate;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/PointerActivateReady".
        /// </summary>
        public InputAction @PointerActivateReady => m_Wrapper.m_LeftHand_PointerActivateReady;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/GraspValue".
        /// </summary>
        public InputAction @GraspValue => m_Wrapper.m_LeftHand_GraspValue;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/GraspReady".
        /// </summary>
        public InputAction @GraspReady => m_Wrapper.m_LeftHand_GraspReady;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/PalmPosePosition".
        /// </summary>
        public InputAction @PalmPosePosition => m_Wrapper.m_LeftHand_PalmPosePosition;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/PalmPoseRotation".
        /// </summary>
        public InputAction @PalmPoseRotation => m_Wrapper.m_LeftHand_PalmPoseRotation;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/PinchPose".
        /// </summary>
        public InputAction @PinchPose => m_Wrapper.m_LeftHand_PinchPose;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/PokePose".
        /// </summary>
        public InputAction @PokePose => m_Wrapper.m_LeftHand_PokePose;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/PalmPose".
        /// </summary>
        public InputAction @PalmPose => m_Wrapper.m_LeftHand_PalmPose;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/GripPose".
        /// </summary>
        public InputAction @GripPose => m_Wrapper.m_LeftHand_GripPose;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/AimPose".
        /// </summary>
        public InputAction @AimPose => m_Wrapper.m_LeftHand_AimPose;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/IsTracked".
        /// </summary>
        public InputAction @IsTracked => m_Wrapper.m_LeftHand_IsTracked;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/TrackingState".
        /// </summary>
        public InputAction @TrackingState => m_Wrapper.m_LeftHand_TrackingState;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/GripTouch".
        /// </summary>
        public InputAction @GripTouch => m_Wrapper.m_LeftHand_GripTouch;
        /// <summary>
        /// Provides access to the underlying input action "LeftHand/ThumbrestTouched".
        /// </summary>
        public InputAction @ThumbrestTouched => m_Wrapper.m_LeftHand_ThumbrestTouched;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_LeftHand; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="LeftHandActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(LeftHandActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="LeftHandActions" />
        public void AddCallbacks(ILeftHandActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftHandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftHandActionsCallbackInterfaces.Add(instance);
            @TriggerPress.started += instance.OnTriggerPress;
            @TriggerPress.performed += instance.OnTriggerPress;
            @TriggerPress.canceled += instance.OnTriggerPress;
            @TriggerTouch.started += instance.OnTriggerTouch;
            @TriggerTouch.performed += instance.OnTriggerTouch;
            @TriggerTouch.canceled += instance.OnTriggerTouch;
            @Trigger.started += instance.OnTrigger;
            @Trigger.performed += instance.OnTrigger;
            @Trigger.canceled += instance.OnTrigger;
            @PrimaryButton.started += instance.OnPrimaryButton;
            @PrimaryButton.performed += instance.OnPrimaryButton;
            @PrimaryButton.canceled += instance.OnPrimaryButton;
            @PrimaryTouch.started += instance.OnPrimaryTouch;
            @PrimaryTouch.performed += instance.OnPrimaryTouch;
            @PrimaryTouch.canceled += instance.OnPrimaryTouch;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
            @Primary2DAxis.started += instance.OnPrimary2DAxis;
            @Primary2DAxis.performed += instance.OnPrimary2DAxis;
            @Primary2DAxis.canceled += instance.OnPrimary2DAxis;
            @Primary2DAxisClick.started += instance.OnPrimary2DAxisClick;
            @Primary2DAxisClick.performed += instance.OnPrimary2DAxisClick;
            @Primary2DAxisClick.canceled += instance.OnPrimary2DAxisClick;
            @Primary2DAxisTouch.started += instance.OnPrimary2DAxisTouch;
            @Primary2DAxisTouch.performed += instance.OnPrimary2DAxisTouch;
            @Primary2DAxisTouch.canceled += instance.OnPrimary2DAxisTouch;
            @Secondary2DAxis.started += instance.OnSecondary2DAxis;
            @Secondary2DAxis.performed += instance.OnSecondary2DAxis;
            @Secondary2DAxis.canceled += instance.OnSecondary2DAxis;
            @Secondary2DAxisClick.started += instance.OnSecondary2DAxisClick;
            @Secondary2DAxisClick.performed += instance.OnSecondary2DAxisClick;
            @Secondary2DAxisClick.canceled += instance.OnSecondary2DAxisClick;
            @Secondary2DAxisTouch.started += instance.OnSecondary2DAxisTouch;
            @Secondary2DAxisTouch.performed += instance.OnSecondary2DAxisTouch;
            @Secondary2DAxisTouch.canceled += instance.OnSecondary2DAxisTouch;
            @Grip.started += instance.OnGrip;
            @Grip.performed += instance.OnGrip;
            @Grip.canceled += instance.OnGrip;
            @GripPress.started += instance.OnGripPress;
            @GripPress.performed += instance.OnGripPress;
            @GripPress.canceled += instance.OnGripPress;
            @SecondaryButton.started += instance.OnSecondaryButton;
            @SecondaryButton.performed += instance.OnSecondaryButton;
            @SecondaryButton.canceled += instance.OnSecondaryButton;
            @SecondaryTouch.started += instance.OnSecondaryTouch;
            @SecondaryTouch.performed += instance.OnSecondaryTouch;
            @SecondaryTouch.canceled += instance.OnSecondaryTouch;
            @PointerPosition.started += instance.OnPointerPosition;
            @PointerPosition.performed += instance.OnPointerPosition;
            @PointerPosition.canceled += instance.OnPointerPosition;
            @PointerRotation.started += instance.OnPointerRotation;
            @PointerRotation.performed += instance.OnPointerRotation;
            @PointerRotation.canceled += instance.OnPointerRotation;
            @GripPosition.started += instance.OnGripPosition;
            @GripPosition.performed += instance.OnGripPosition;
            @GripPosition.canceled += instance.OnGripPosition;
            @GripRotation.started += instance.OnGripRotation;
            @GripRotation.performed += instance.OnGripRotation;
            @GripRotation.canceled += instance.OnGripRotation;
            @Haptic.started += instance.OnHaptic;
            @Haptic.performed += instance.OnHaptic;
            @Haptic.canceled += instance.OnHaptic;
            @PokePosition.started += instance.OnPokePosition;
            @PokePosition.performed += instance.OnPokePosition;
            @PokePosition.canceled += instance.OnPokePosition;
            @PokeRotation.started += instance.OnPokeRotation;
            @PokeRotation.performed += instance.OnPokeRotation;
            @PokeRotation.canceled += instance.OnPokeRotation;
            @PinchPosition.started += instance.OnPinchPosition;
            @PinchPosition.performed += instance.OnPinchPosition;
            @PinchPosition.canceled += instance.OnPinchPosition;
            @PinchRotation.started += instance.OnPinchRotation;
            @PinchRotation.performed += instance.OnPinchRotation;
            @PinchRotation.canceled += instance.OnPinchRotation;
            @PinchValue.started += instance.OnPinchValue;
            @PinchValue.performed += instance.OnPinchValue;
            @PinchValue.canceled += instance.OnPinchValue;
            @PinchReady.started += instance.OnPinchReady;
            @PinchReady.performed += instance.OnPinchReady;
            @PinchReady.canceled += instance.OnPinchReady;
            @PointerActivate.started += instance.OnPointerActivate;
            @PointerActivate.performed += instance.OnPointerActivate;
            @PointerActivate.canceled += instance.OnPointerActivate;
            @PointerActivateReady.started += instance.OnPointerActivateReady;
            @PointerActivateReady.performed += instance.OnPointerActivateReady;
            @PointerActivateReady.canceled += instance.OnPointerActivateReady;
            @GraspValue.started += instance.OnGraspValue;
            @GraspValue.performed += instance.OnGraspValue;
            @GraspValue.canceled += instance.OnGraspValue;
            @GraspReady.started += instance.OnGraspReady;
            @GraspReady.performed += instance.OnGraspReady;
            @GraspReady.canceled += instance.OnGraspReady;
            @PalmPosePosition.started += instance.OnPalmPosePosition;
            @PalmPosePosition.performed += instance.OnPalmPosePosition;
            @PalmPosePosition.canceled += instance.OnPalmPosePosition;
            @PalmPoseRotation.started += instance.OnPalmPoseRotation;
            @PalmPoseRotation.performed += instance.OnPalmPoseRotation;
            @PalmPoseRotation.canceled += instance.OnPalmPoseRotation;
            @PinchPose.started += instance.OnPinchPose;
            @PinchPose.performed += instance.OnPinchPose;
            @PinchPose.canceled += instance.OnPinchPose;
            @PokePose.started += instance.OnPokePose;
            @PokePose.performed += instance.OnPokePose;
            @PokePose.canceled += instance.OnPokePose;
            @PalmPose.started += instance.OnPalmPose;
            @PalmPose.performed += instance.OnPalmPose;
            @PalmPose.canceled += instance.OnPalmPose;
            @GripPose.started += instance.OnGripPose;
            @GripPose.performed += instance.OnGripPose;
            @GripPose.canceled += instance.OnGripPose;
            @AimPose.started += instance.OnAimPose;
            @AimPose.performed += instance.OnAimPose;
            @AimPose.canceled += instance.OnAimPose;
            @IsTracked.started += instance.OnIsTracked;
            @IsTracked.performed += instance.OnIsTracked;
            @IsTracked.canceled += instance.OnIsTracked;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @GripTouch.started += instance.OnGripTouch;
            @GripTouch.performed += instance.OnGripTouch;
            @GripTouch.canceled += instance.OnGripTouch;
            @ThumbrestTouched.started += instance.OnThumbrestTouched;
            @ThumbrestTouched.performed += instance.OnThumbrestTouched;
            @ThumbrestTouched.canceled += instance.OnThumbrestTouched;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="LeftHandActions" />
        private void UnregisterCallbacks(ILeftHandActions instance)
        {
            @TriggerPress.started -= instance.OnTriggerPress;
            @TriggerPress.performed -= instance.OnTriggerPress;
            @TriggerPress.canceled -= instance.OnTriggerPress;
            @TriggerTouch.started -= instance.OnTriggerTouch;
            @TriggerTouch.performed -= instance.OnTriggerTouch;
            @TriggerTouch.canceled -= instance.OnTriggerTouch;
            @Trigger.started -= instance.OnTrigger;
            @Trigger.performed -= instance.OnTrigger;
            @Trigger.canceled -= instance.OnTrigger;
            @PrimaryButton.started -= instance.OnPrimaryButton;
            @PrimaryButton.performed -= instance.OnPrimaryButton;
            @PrimaryButton.canceled -= instance.OnPrimaryButton;
            @PrimaryTouch.started -= instance.OnPrimaryTouch;
            @PrimaryTouch.performed -= instance.OnPrimaryTouch;
            @PrimaryTouch.canceled -= instance.OnPrimaryTouch;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
            @Primary2DAxis.started -= instance.OnPrimary2DAxis;
            @Primary2DAxis.performed -= instance.OnPrimary2DAxis;
            @Primary2DAxis.canceled -= instance.OnPrimary2DAxis;
            @Primary2DAxisClick.started -= instance.OnPrimary2DAxisClick;
            @Primary2DAxisClick.performed -= instance.OnPrimary2DAxisClick;
            @Primary2DAxisClick.canceled -= instance.OnPrimary2DAxisClick;
            @Primary2DAxisTouch.started -= instance.OnPrimary2DAxisTouch;
            @Primary2DAxisTouch.performed -= instance.OnPrimary2DAxisTouch;
            @Primary2DAxisTouch.canceled -= instance.OnPrimary2DAxisTouch;
            @Secondary2DAxis.started -= instance.OnSecondary2DAxis;
            @Secondary2DAxis.performed -= instance.OnSecondary2DAxis;
            @Secondary2DAxis.canceled -= instance.OnSecondary2DAxis;
            @Secondary2DAxisClick.started -= instance.OnSecondary2DAxisClick;
            @Secondary2DAxisClick.performed -= instance.OnSecondary2DAxisClick;
            @Secondary2DAxisClick.canceled -= instance.OnSecondary2DAxisClick;
            @Secondary2DAxisTouch.started -= instance.OnSecondary2DAxisTouch;
            @Secondary2DAxisTouch.performed -= instance.OnSecondary2DAxisTouch;
            @Secondary2DAxisTouch.canceled -= instance.OnSecondary2DAxisTouch;
            @Grip.started -= instance.OnGrip;
            @Grip.performed -= instance.OnGrip;
            @Grip.canceled -= instance.OnGrip;
            @GripPress.started -= instance.OnGripPress;
            @GripPress.performed -= instance.OnGripPress;
            @GripPress.canceled -= instance.OnGripPress;
            @SecondaryButton.started -= instance.OnSecondaryButton;
            @SecondaryButton.performed -= instance.OnSecondaryButton;
            @SecondaryButton.canceled -= instance.OnSecondaryButton;
            @SecondaryTouch.started -= instance.OnSecondaryTouch;
            @SecondaryTouch.performed -= instance.OnSecondaryTouch;
            @SecondaryTouch.canceled -= instance.OnSecondaryTouch;
            @PointerPosition.started -= instance.OnPointerPosition;
            @PointerPosition.performed -= instance.OnPointerPosition;
            @PointerPosition.canceled -= instance.OnPointerPosition;
            @PointerRotation.started -= instance.OnPointerRotation;
            @PointerRotation.performed -= instance.OnPointerRotation;
            @PointerRotation.canceled -= instance.OnPointerRotation;
            @GripPosition.started -= instance.OnGripPosition;
            @GripPosition.performed -= instance.OnGripPosition;
            @GripPosition.canceled -= instance.OnGripPosition;
            @GripRotation.started -= instance.OnGripRotation;
            @GripRotation.performed -= instance.OnGripRotation;
            @GripRotation.canceled -= instance.OnGripRotation;
            @Haptic.started -= instance.OnHaptic;
            @Haptic.performed -= instance.OnHaptic;
            @Haptic.canceled -= instance.OnHaptic;
            @PokePosition.started -= instance.OnPokePosition;
            @PokePosition.performed -= instance.OnPokePosition;
            @PokePosition.canceled -= instance.OnPokePosition;
            @PokeRotation.started -= instance.OnPokeRotation;
            @PokeRotation.performed -= instance.OnPokeRotation;
            @PokeRotation.canceled -= instance.OnPokeRotation;
            @PinchPosition.started -= instance.OnPinchPosition;
            @PinchPosition.performed -= instance.OnPinchPosition;
            @PinchPosition.canceled -= instance.OnPinchPosition;
            @PinchRotation.started -= instance.OnPinchRotation;
            @PinchRotation.performed -= instance.OnPinchRotation;
            @PinchRotation.canceled -= instance.OnPinchRotation;
            @PinchValue.started -= instance.OnPinchValue;
            @PinchValue.performed -= instance.OnPinchValue;
            @PinchValue.canceled -= instance.OnPinchValue;
            @PinchReady.started -= instance.OnPinchReady;
            @PinchReady.performed -= instance.OnPinchReady;
            @PinchReady.canceled -= instance.OnPinchReady;
            @PointerActivate.started -= instance.OnPointerActivate;
            @PointerActivate.performed -= instance.OnPointerActivate;
            @PointerActivate.canceled -= instance.OnPointerActivate;
            @PointerActivateReady.started -= instance.OnPointerActivateReady;
            @PointerActivateReady.performed -= instance.OnPointerActivateReady;
            @PointerActivateReady.canceled -= instance.OnPointerActivateReady;
            @GraspValue.started -= instance.OnGraspValue;
            @GraspValue.performed -= instance.OnGraspValue;
            @GraspValue.canceled -= instance.OnGraspValue;
            @GraspReady.started -= instance.OnGraspReady;
            @GraspReady.performed -= instance.OnGraspReady;
            @GraspReady.canceled -= instance.OnGraspReady;
            @PalmPosePosition.started -= instance.OnPalmPosePosition;
            @PalmPosePosition.performed -= instance.OnPalmPosePosition;
            @PalmPosePosition.canceled -= instance.OnPalmPosePosition;
            @PalmPoseRotation.started -= instance.OnPalmPoseRotation;
            @PalmPoseRotation.performed -= instance.OnPalmPoseRotation;
            @PalmPoseRotation.canceled -= instance.OnPalmPoseRotation;
            @PinchPose.started -= instance.OnPinchPose;
            @PinchPose.performed -= instance.OnPinchPose;
            @PinchPose.canceled -= instance.OnPinchPose;
            @PokePose.started -= instance.OnPokePose;
            @PokePose.performed -= instance.OnPokePose;
            @PokePose.canceled -= instance.OnPokePose;
            @PalmPose.started -= instance.OnPalmPose;
            @PalmPose.performed -= instance.OnPalmPose;
            @PalmPose.canceled -= instance.OnPalmPose;
            @GripPose.started -= instance.OnGripPose;
            @GripPose.performed -= instance.OnGripPose;
            @GripPose.canceled -= instance.OnGripPose;
            @AimPose.started -= instance.OnAimPose;
            @AimPose.performed -= instance.OnAimPose;
            @AimPose.canceled -= instance.OnAimPose;
            @IsTracked.started -= instance.OnIsTracked;
            @IsTracked.performed -= instance.OnIsTracked;
            @IsTracked.canceled -= instance.OnIsTracked;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @GripTouch.started -= instance.OnGripTouch;
            @GripTouch.performed -= instance.OnGripTouch;
            @GripTouch.canceled -= instance.OnGripTouch;
            @ThumbrestTouched.started -= instance.OnThumbrestTouched;
            @ThumbrestTouched.performed -= instance.OnThumbrestTouched;
            @ThumbrestTouched.canceled -= instance.OnThumbrestTouched;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="LeftHandActions.UnregisterCallbacks(ILeftHandActions)" />.
        /// </summary>
        /// <seealso cref="LeftHandActions.UnregisterCallbacks(ILeftHandActions)" />
        public void RemoveCallbacks(ILeftHandActions instance)
        {
            if (m_Wrapper.m_LeftHandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="LeftHandActions.AddCallbacks(ILeftHandActions)" />
        /// <seealso cref="LeftHandActions.RemoveCallbacks(ILeftHandActions)" />
        /// <seealso cref="LeftHandActions.UnregisterCallbacks(ILeftHandActions)" />
        public void SetCallbacks(ILeftHandActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftHandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftHandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="LeftHandActions" /> instance referencing this action map.
    /// </summary>
    public LeftHandActions @LeftHand => new LeftHandActions(this);

    // RightHand
    private readonly InputActionMap m_RightHand;
    private List<IRightHandActions> m_RightHandActionsCallbackInterfaces = new List<IRightHandActions>();
    private readonly InputAction m_RightHand_TriggerPress;
    private readonly InputAction m_RightHand_TriggerTouch;
    private readonly InputAction m_RightHand_Trigger;
    private readonly InputAction m_RightHand_PrimaryButton;
    private readonly InputAction m_RightHand_PrimaryTouch;
    private readonly InputAction m_RightHand_Menu;
    private readonly InputAction m_RightHand_Primary2DAxis;
    private readonly InputAction m_RightHand_Primary2DAxisClick;
    private readonly InputAction m_RightHand_Primary2DAxisTouch;
    private readonly InputAction m_RightHand_Secondary2DAxis;
    private readonly InputAction m_RightHand_Secondary2DAxisClick;
    private readonly InputAction m_RightHand_Secondary2DAxisTouch;
    private readonly InputAction m_RightHand_Grip;
    private readonly InputAction m_RightHand_GripPress;
    private readonly InputAction m_RightHand_SecondaryButton;
    private readonly InputAction m_RightHand_SecondaryTouch;
    private readonly InputAction m_RightHand_PointerPosition;
    private readonly InputAction m_RightHand_PointerRotation;
    private readonly InputAction m_RightHand_GripPosition;
    private readonly InputAction m_RightHand_GripRotation;
    private readonly InputAction m_RightHand_Haptic;
    private readonly InputAction m_RightHand_PokePosition;
    private readonly InputAction m_RightHand_PokeRotation;
    private readonly InputAction m_RightHand_PinchPosition;
    private readonly InputAction m_RightHand_PinchRotation;
    private readonly InputAction m_RightHand_PinchValue;
    private readonly InputAction m_RightHand_PinchReady;
    private readonly InputAction m_RightHand_PointerActivate;
    private readonly InputAction m_RightHand_PointerActivateReady;
    private readonly InputAction m_RightHand_GraspValue;
    private readonly InputAction m_RightHand_GraspReady;
    private readonly InputAction m_RightHand_PalmPosePosition;
    private readonly InputAction m_RightHand_PalmPoseRotation;
    private readonly InputAction m_RightHand_PinchPose;
    private readonly InputAction m_RightHand_PokePose;
    private readonly InputAction m_RightHand_PalmPose;
    private readonly InputAction m_RightHand_GripPose;
    private readonly InputAction m_RightHand_AimPose;
    private readonly InputAction m_RightHand_IsTracked;
    private readonly InputAction m_RightHand_TrackingState;
    private readonly InputAction m_RightHand_GripTouch;
    private readonly InputAction m_RightHand_ThumbrestTouched;
    /// <summary>
    /// Provides access to input actions defined in input action map "RightHand".
    /// </summary>
    public struct RightHandActions
    {
        private @InputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public RightHandActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "RightHand/TriggerPress".
        /// </summary>
        public InputAction @TriggerPress => m_Wrapper.m_RightHand_TriggerPress;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/TriggerTouch".
        /// </summary>
        public InputAction @TriggerTouch => m_Wrapper.m_RightHand_TriggerTouch;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/Trigger".
        /// </summary>
        public InputAction @Trigger => m_Wrapper.m_RightHand_Trigger;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/PrimaryButton".
        /// </summary>
        public InputAction @PrimaryButton => m_Wrapper.m_RightHand_PrimaryButton;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/PrimaryTouch".
        /// </summary>
        public InputAction @PrimaryTouch => m_Wrapper.m_RightHand_PrimaryTouch;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/Menu".
        /// </summary>
        public InputAction @Menu => m_Wrapper.m_RightHand_Menu;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/Primary2DAxis".
        /// </summary>
        public InputAction @Primary2DAxis => m_Wrapper.m_RightHand_Primary2DAxis;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/Primary2DAxisClick".
        /// </summary>
        public InputAction @Primary2DAxisClick => m_Wrapper.m_RightHand_Primary2DAxisClick;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/Primary2DAxisTouch".
        /// </summary>
        public InputAction @Primary2DAxisTouch => m_Wrapper.m_RightHand_Primary2DAxisTouch;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/Secondary2DAxis".
        /// </summary>
        public InputAction @Secondary2DAxis => m_Wrapper.m_RightHand_Secondary2DAxis;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/Secondary2DAxisClick".
        /// </summary>
        public InputAction @Secondary2DAxisClick => m_Wrapper.m_RightHand_Secondary2DAxisClick;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/Secondary2DAxisTouch".
        /// </summary>
        public InputAction @Secondary2DAxisTouch => m_Wrapper.m_RightHand_Secondary2DAxisTouch;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/Grip".
        /// </summary>
        public InputAction @Grip => m_Wrapper.m_RightHand_Grip;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/GripPress".
        /// </summary>
        public InputAction @GripPress => m_Wrapper.m_RightHand_GripPress;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/SecondaryButton".
        /// </summary>
        public InputAction @SecondaryButton => m_Wrapper.m_RightHand_SecondaryButton;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/SecondaryTouch".
        /// </summary>
        public InputAction @SecondaryTouch => m_Wrapper.m_RightHand_SecondaryTouch;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/PointerPosition".
        /// </summary>
        public InputAction @PointerPosition => m_Wrapper.m_RightHand_PointerPosition;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/PointerRotation".
        /// </summary>
        public InputAction @PointerRotation => m_Wrapper.m_RightHand_PointerRotation;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/GripPosition".
        /// </summary>
        public InputAction @GripPosition => m_Wrapper.m_RightHand_GripPosition;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/GripRotation".
        /// </summary>
        public InputAction @GripRotation => m_Wrapper.m_RightHand_GripRotation;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/Haptic".
        /// </summary>
        public InputAction @Haptic => m_Wrapper.m_RightHand_Haptic;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/PokePosition".
        /// </summary>
        public InputAction @PokePosition => m_Wrapper.m_RightHand_PokePosition;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/PokeRotation".
        /// </summary>
        public InputAction @PokeRotation => m_Wrapper.m_RightHand_PokeRotation;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/PinchPosition".
        /// </summary>
        public InputAction @PinchPosition => m_Wrapper.m_RightHand_PinchPosition;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/PinchRotation".
        /// </summary>
        public InputAction @PinchRotation => m_Wrapper.m_RightHand_PinchRotation;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/PinchValue".
        /// </summary>
        public InputAction @PinchValue => m_Wrapper.m_RightHand_PinchValue;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/PinchReady".
        /// </summary>
        public InputAction @PinchReady => m_Wrapper.m_RightHand_PinchReady;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/PointerActivate".
        /// </summary>
        public InputAction @PointerActivate => m_Wrapper.m_RightHand_PointerActivate;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/PointerActivateReady".
        /// </summary>
        public InputAction @PointerActivateReady => m_Wrapper.m_RightHand_PointerActivateReady;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/GraspValue".
        /// </summary>
        public InputAction @GraspValue => m_Wrapper.m_RightHand_GraspValue;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/GraspReady".
        /// </summary>
        public InputAction @GraspReady => m_Wrapper.m_RightHand_GraspReady;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/PalmPosePosition".
        /// </summary>
        public InputAction @PalmPosePosition => m_Wrapper.m_RightHand_PalmPosePosition;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/PalmPoseRotation".
        /// </summary>
        public InputAction @PalmPoseRotation => m_Wrapper.m_RightHand_PalmPoseRotation;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/PinchPose".
        /// </summary>
        public InputAction @PinchPose => m_Wrapper.m_RightHand_PinchPose;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/PokePose".
        /// </summary>
        public InputAction @PokePose => m_Wrapper.m_RightHand_PokePose;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/PalmPose".
        /// </summary>
        public InputAction @PalmPose => m_Wrapper.m_RightHand_PalmPose;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/GripPose".
        /// </summary>
        public InputAction @GripPose => m_Wrapper.m_RightHand_GripPose;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/AimPose".
        /// </summary>
        public InputAction @AimPose => m_Wrapper.m_RightHand_AimPose;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/IsTracked".
        /// </summary>
        public InputAction @IsTracked => m_Wrapper.m_RightHand_IsTracked;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/TrackingState".
        /// </summary>
        public InputAction @TrackingState => m_Wrapper.m_RightHand_TrackingState;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/GripTouch".
        /// </summary>
        public InputAction @GripTouch => m_Wrapper.m_RightHand_GripTouch;
        /// <summary>
        /// Provides access to the underlying input action "RightHand/ThumbrestTouched".
        /// </summary>
        public InputAction @ThumbrestTouched => m_Wrapper.m_RightHand_ThumbrestTouched;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_RightHand; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="RightHandActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(RightHandActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="RightHandActions" />
        public void AddCallbacks(IRightHandActions instance)
        {
            if (instance == null || m_Wrapper.m_RightHandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightHandActionsCallbackInterfaces.Add(instance);
            @TriggerPress.started += instance.OnTriggerPress;
            @TriggerPress.performed += instance.OnTriggerPress;
            @TriggerPress.canceled += instance.OnTriggerPress;
            @TriggerTouch.started += instance.OnTriggerTouch;
            @TriggerTouch.performed += instance.OnTriggerTouch;
            @TriggerTouch.canceled += instance.OnTriggerTouch;
            @Trigger.started += instance.OnTrigger;
            @Trigger.performed += instance.OnTrigger;
            @Trigger.canceled += instance.OnTrigger;
            @PrimaryButton.started += instance.OnPrimaryButton;
            @PrimaryButton.performed += instance.OnPrimaryButton;
            @PrimaryButton.canceled += instance.OnPrimaryButton;
            @PrimaryTouch.started += instance.OnPrimaryTouch;
            @PrimaryTouch.performed += instance.OnPrimaryTouch;
            @PrimaryTouch.canceled += instance.OnPrimaryTouch;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
            @Primary2DAxis.started += instance.OnPrimary2DAxis;
            @Primary2DAxis.performed += instance.OnPrimary2DAxis;
            @Primary2DAxis.canceled += instance.OnPrimary2DAxis;
            @Primary2DAxisClick.started += instance.OnPrimary2DAxisClick;
            @Primary2DAxisClick.performed += instance.OnPrimary2DAxisClick;
            @Primary2DAxisClick.canceled += instance.OnPrimary2DAxisClick;
            @Primary2DAxisTouch.started += instance.OnPrimary2DAxisTouch;
            @Primary2DAxisTouch.performed += instance.OnPrimary2DAxisTouch;
            @Primary2DAxisTouch.canceled += instance.OnPrimary2DAxisTouch;
            @Secondary2DAxis.started += instance.OnSecondary2DAxis;
            @Secondary2DAxis.performed += instance.OnSecondary2DAxis;
            @Secondary2DAxis.canceled += instance.OnSecondary2DAxis;
            @Secondary2DAxisClick.started += instance.OnSecondary2DAxisClick;
            @Secondary2DAxisClick.performed += instance.OnSecondary2DAxisClick;
            @Secondary2DAxisClick.canceled += instance.OnSecondary2DAxisClick;
            @Secondary2DAxisTouch.started += instance.OnSecondary2DAxisTouch;
            @Secondary2DAxisTouch.performed += instance.OnSecondary2DAxisTouch;
            @Secondary2DAxisTouch.canceled += instance.OnSecondary2DAxisTouch;
            @Grip.started += instance.OnGrip;
            @Grip.performed += instance.OnGrip;
            @Grip.canceled += instance.OnGrip;
            @GripPress.started += instance.OnGripPress;
            @GripPress.performed += instance.OnGripPress;
            @GripPress.canceled += instance.OnGripPress;
            @SecondaryButton.started += instance.OnSecondaryButton;
            @SecondaryButton.performed += instance.OnSecondaryButton;
            @SecondaryButton.canceled += instance.OnSecondaryButton;
            @SecondaryTouch.started += instance.OnSecondaryTouch;
            @SecondaryTouch.performed += instance.OnSecondaryTouch;
            @SecondaryTouch.canceled += instance.OnSecondaryTouch;
            @PointerPosition.started += instance.OnPointerPosition;
            @PointerPosition.performed += instance.OnPointerPosition;
            @PointerPosition.canceled += instance.OnPointerPosition;
            @PointerRotation.started += instance.OnPointerRotation;
            @PointerRotation.performed += instance.OnPointerRotation;
            @PointerRotation.canceled += instance.OnPointerRotation;
            @GripPosition.started += instance.OnGripPosition;
            @GripPosition.performed += instance.OnGripPosition;
            @GripPosition.canceled += instance.OnGripPosition;
            @GripRotation.started += instance.OnGripRotation;
            @GripRotation.performed += instance.OnGripRotation;
            @GripRotation.canceled += instance.OnGripRotation;
            @Haptic.started += instance.OnHaptic;
            @Haptic.performed += instance.OnHaptic;
            @Haptic.canceled += instance.OnHaptic;
            @PokePosition.started += instance.OnPokePosition;
            @PokePosition.performed += instance.OnPokePosition;
            @PokePosition.canceled += instance.OnPokePosition;
            @PokeRotation.started += instance.OnPokeRotation;
            @PokeRotation.performed += instance.OnPokeRotation;
            @PokeRotation.canceled += instance.OnPokeRotation;
            @PinchPosition.started += instance.OnPinchPosition;
            @PinchPosition.performed += instance.OnPinchPosition;
            @PinchPosition.canceled += instance.OnPinchPosition;
            @PinchRotation.started += instance.OnPinchRotation;
            @PinchRotation.performed += instance.OnPinchRotation;
            @PinchRotation.canceled += instance.OnPinchRotation;
            @PinchValue.started += instance.OnPinchValue;
            @PinchValue.performed += instance.OnPinchValue;
            @PinchValue.canceled += instance.OnPinchValue;
            @PinchReady.started += instance.OnPinchReady;
            @PinchReady.performed += instance.OnPinchReady;
            @PinchReady.canceled += instance.OnPinchReady;
            @PointerActivate.started += instance.OnPointerActivate;
            @PointerActivate.performed += instance.OnPointerActivate;
            @PointerActivate.canceled += instance.OnPointerActivate;
            @PointerActivateReady.started += instance.OnPointerActivateReady;
            @PointerActivateReady.performed += instance.OnPointerActivateReady;
            @PointerActivateReady.canceled += instance.OnPointerActivateReady;
            @GraspValue.started += instance.OnGraspValue;
            @GraspValue.performed += instance.OnGraspValue;
            @GraspValue.canceled += instance.OnGraspValue;
            @GraspReady.started += instance.OnGraspReady;
            @GraspReady.performed += instance.OnGraspReady;
            @GraspReady.canceled += instance.OnGraspReady;
            @PalmPosePosition.started += instance.OnPalmPosePosition;
            @PalmPosePosition.performed += instance.OnPalmPosePosition;
            @PalmPosePosition.canceled += instance.OnPalmPosePosition;
            @PalmPoseRotation.started += instance.OnPalmPoseRotation;
            @PalmPoseRotation.performed += instance.OnPalmPoseRotation;
            @PalmPoseRotation.canceled += instance.OnPalmPoseRotation;
            @PinchPose.started += instance.OnPinchPose;
            @PinchPose.performed += instance.OnPinchPose;
            @PinchPose.canceled += instance.OnPinchPose;
            @PokePose.started += instance.OnPokePose;
            @PokePose.performed += instance.OnPokePose;
            @PokePose.canceled += instance.OnPokePose;
            @PalmPose.started += instance.OnPalmPose;
            @PalmPose.performed += instance.OnPalmPose;
            @PalmPose.canceled += instance.OnPalmPose;
            @GripPose.started += instance.OnGripPose;
            @GripPose.performed += instance.OnGripPose;
            @GripPose.canceled += instance.OnGripPose;
            @AimPose.started += instance.OnAimPose;
            @AimPose.performed += instance.OnAimPose;
            @AimPose.canceled += instance.OnAimPose;
            @IsTracked.started += instance.OnIsTracked;
            @IsTracked.performed += instance.OnIsTracked;
            @IsTracked.canceled += instance.OnIsTracked;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @GripTouch.started += instance.OnGripTouch;
            @GripTouch.performed += instance.OnGripTouch;
            @GripTouch.canceled += instance.OnGripTouch;
            @ThumbrestTouched.started += instance.OnThumbrestTouched;
            @ThumbrestTouched.performed += instance.OnThumbrestTouched;
            @ThumbrestTouched.canceled += instance.OnThumbrestTouched;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="RightHandActions" />
        private void UnregisterCallbacks(IRightHandActions instance)
        {
            @TriggerPress.started -= instance.OnTriggerPress;
            @TriggerPress.performed -= instance.OnTriggerPress;
            @TriggerPress.canceled -= instance.OnTriggerPress;
            @TriggerTouch.started -= instance.OnTriggerTouch;
            @TriggerTouch.performed -= instance.OnTriggerTouch;
            @TriggerTouch.canceled -= instance.OnTriggerTouch;
            @Trigger.started -= instance.OnTrigger;
            @Trigger.performed -= instance.OnTrigger;
            @Trigger.canceled -= instance.OnTrigger;
            @PrimaryButton.started -= instance.OnPrimaryButton;
            @PrimaryButton.performed -= instance.OnPrimaryButton;
            @PrimaryButton.canceled -= instance.OnPrimaryButton;
            @PrimaryTouch.started -= instance.OnPrimaryTouch;
            @PrimaryTouch.performed -= instance.OnPrimaryTouch;
            @PrimaryTouch.canceled -= instance.OnPrimaryTouch;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
            @Primary2DAxis.started -= instance.OnPrimary2DAxis;
            @Primary2DAxis.performed -= instance.OnPrimary2DAxis;
            @Primary2DAxis.canceled -= instance.OnPrimary2DAxis;
            @Primary2DAxisClick.started -= instance.OnPrimary2DAxisClick;
            @Primary2DAxisClick.performed -= instance.OnPrimary2DAxisClick;
            @Primary2DAxisClick.canceled -= instance.OnPrimary2DAxisClick;
            @Primary2DAxisTouch.started -= instance.OnPrimary2DAxisTouch;
            @Primary2DAxisTouch.performed -= instance.OnPrimary2DAxisTouch;
            @Primary2DAxisTouch.canceled -= instance.OnPrimary2DAxisTouch;
            @Secondary2DAxis.started -= instance.OnSecondary2DAxis;
            @Secondary2DAxis.performed -= instance.OnSecondary2DAxis;
            @Secondary2DAxis.canceled -= instance.OnSecondary2DAxis;
            @Secondary2DAxisClick.started -= instance.OnSecondary2DAxisClick;
            @Secondary2DAxisClick.performed -= instance.OnSecondary2DAxisClick;
            @Secondary2DAxisClick.canceled -= instance.OnSecondary2DAxisClick;
            @Secondary2DAxisTouch.started -= instance.OnSecondary2DAxisTouch;
            @Secondary2DAxisTouch.performed -= instance.OnSecondary2DAxisTouch;
            @Secondary2DAxisTouch.canceled -= instance.OnSecondary2DAxisTouch;
            @Grip.started -= instance.OnGrip;
            @Grip.performed -= instance.OnGrip;
            @Grip.canceled -= instance.OnGrip;
            @GripPress.started -= instance.OnGripPress;
            @GripPress.performed -= instance.OnGripPress;
            @GripPress.canceled -= instance.OnGripPress;
            @SecondaryButton.started -= instance.OnSecondaryButton;
            @SecondaryButton.performed -= instance.OnSecondaryButton;
            @SecondaryButton.canceled -= instance.OnSecondaryButton;
            @SecondaryTouch.started -= instance.OnSecondaryTouch;
            @SecondaryTouch.performed -= instance.OnSecondaryTouch;
            @SecondaryTouch.canceled -= instance.OnSecondaryTouch;
            @PointerPosition.started -= instance.OnPointerPosition;
            @PointerPosition.performed -= instance.OnPointerPosition;
            @PointerPosition.canceled -= instance.OnPointerPosition;
            @PointerRotation.started -= instance.OnPointerRotation;
            @PointerRotation.performed -= instance.OnPointerRotation;
            @PointerRotation.canceled -= instance.OnPointerRotation;
            @GripPosition.started -= instance.OnGripPosition;
            @GripPosition.performed -= instance.OnGripPosition;
            @GripPosition.canceled -= instance.OnGripPosition;
            @GripRotation.started -= instance.OnGripRotation;
            @GripRotation.performed -= instance.OnGripRotation;
            @GripRotation.canceled -= instance.OnGripRotation;
            @Haptic.started -= instance.OnHaptic;
            @Haptic.performed -= instance.OnHaptic;
            @Haptic.canceled -= instance.OnHaptic;
            @PokePosition.started -= instance.OnPokePosition;
            @PokePosition.performed -= instance.OnPokePosition;
            @PokePosition.canceled -= instance.OnPokePosition;
            @PokeRotation.started -= instance.OnPokeRotation;
            @PokeRotation.performed -= instance.OnPokeRotation;
            @PokeRotation.canceled -= instance.OnPokeRotation;
            @PinchPosition.started -= instance.OnPinchPosition;
            @PinchPosition.performed -= instance.OnPinchPosition;
            @PinchPosition.canceled -= instance.OnPinchPosition;
            @PinchRotation.started -= instance.OnPinchRotation;
            @PinchRotation.performed -= instance.OnPinchRotation;
            @PinchRotation.canceled -= instance.OnPinchRotation;
            @PinchValue.started -= instance.OnPinchValue;
            @PinchValue.performed -= instance.OnPinchValue;
            @PinchValue.canceled -= instance.OnPinchValue;
            @PinchReady.started -= instance.OnPinchReady;
            @PinchReady.performed -= instance.OnPinchReady;
            @PinchReady.canceled -= instance.OnPinchReady;
            @PointerActivate.started -= instance.OnPointerActivate;
            @PointerActivate.performed -= instance.OnPointerActivate;
            @PointerActivate.canceled -= instance.OnPointerActivate;
            @PointerActivateReady.started -= instance.OnPointerActivateReady;
            @PointerActivateReady.performed -= instance.OnPointerActivateReady;
            @PointerActivateReady.canceled -= instance.OnPointerActivateReady;
            @GraspValue.started -= instance.OnGraspValue;
            @GraspValue.performed -= instance.OnGraspValue;
            @GraspValue.canceled -= instance.OnGraspValue;
            @GraspReady.started -= instance.OnGraspReady;
            @GraspReady.performed -= instance.OnGraspReady;
            @GraspReady.canceled -= instance.OnGraspReady;
            @PalmPosePosition.started -= instance.OnPalmPosePosition;
            @PalmPosePosition.performed -= instance.OnPalmPosePosition;
            @PalmPosePosition.canceled -= instance.OnPalmPosePosition;
            @PalmPoseRotation.started -= instance.OnPalmPoseRotation;
            @PalmPoseRotation.performed -= instance.OnPalmPoseRotation;
            @PalmPoseRotation.canceled -= instance.OnPalmPoseRotation;
            @PinchPose.started -= instance.OnPinchPose;
            @PinchPose.performed -= instance.OnPinchPose;
            @PinchPose.canceled -= instance.OnPinchPose;
            @PokePose.started -= instance.OnPokePose;
            @PokePose.performed -= instance.OnPokePose;
            @PokePose.canceled -= instance.OnPokePose;
            @PalmPose.started -= instance.OnPalmPose;
            @PalmPose.performed -= instance.OnPalmPose;
            @PalmPose.canceled -= instance.OnPalmPose;
            @GripPose.started -= instance.OnGripPose;
            @GripPose.performed -= instance.OnGripPose;
            @GripPose.canceled -= instance.OnGripPose;
            @AimPose.started -= instance.OnAimPose;
            @AimPose.performed -= instance.OnAimPose;
            @AimPose.canceled -= instance.OnAimPose;
            @IsTracked.started -= instance.OnIsTracked;
            @IsTracked.performed -= instance.OnIsTracked;
            @IsTracked.canceled -= instance.OnIsTracked;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @GripTouch.started -= instance.OnGripTouch;
            @GripTouch.performed -= instance.OnGripTouch;
            @GripTouch.canceled -= instance.OnGripTouch;
            @ThumbrestTouched.started -= instance.OnThumbrestTouched;
            @ThumbrestTouched.performed -= instance.OnThumbrestTouched;
            @ThumbrestTouched.canceled -= instance.OnThumbrestTouched;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="RightHandActions.UnregisterCallbacks(IRightHandActions)" />.
        /// </summary>
        /// <seealso cref="RightHandActions.UnregisterCallbacks(IRightHandActions)" />
        public void RemoveCallbacks(IRightHandActions instance)
        {
            if (m_Wrapper.m_RightHandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="RightHandActions.AddCallbacks(IRightHandActions)" />
        /// <seealso cref="RightHandActions.RemoveCallbacks(IRightHandActions)" />
        /// <seealso cref="RightHandActions.UnregisterCallbacks(IRightHandActions)" />
        public void SetCallbacks(IRightHandActions instance)
        {
            foreach (var item in m_Wrapper.m_RightHandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightHandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="RightHandActions" /> instance referencing this action map.
    /// </summary>
    public RightHandActions @RightHand => new RightHandActions(this);

    // HMD
    private readonly InputActionMap m_HMD;
    private List<IHMDActions> m_HMDActionsCallbackInterfaces = new List<IHMDActions>();
    private readonly InputAction m_HMD_hmdPosition;
    private readonly InputAction m_HMD_hmdRotation;
    /// <summary>
    /// Provides access to input actions defined in input action map "HMD".
    /// </summary>
    public struct HMDActions
    {
        private @InputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public HMDActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "HMD/hmdPosition".
        /// </summary>
        public InputAction @hmdPosition => m_Wrapper.m_HMD_hmdPosition;
        /// <summary>
        /// Provides access to the underlying input action "HMD/hmdRotation".
        /// </summary>
        public InputAction @hmdRotation => m_Wrapper.m_HMD_hmdRotation;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_HMD; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="HMDActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(HMDActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="HMDActions" />
        public void AddCallbacks(IHMDActions instance)
        {
            if (instance == null || m_Wrapper.m_HMDActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HMDActionsCallbackInterfaces.Add(instance);
            @hmdPosition.started += instance.OnHmdPosition;
            @hmdPosition.performed += instance.OnHmdPosition;
            @hmdPosition.canceled += instance.OnHmdPosition;
            @hmdRotation.started += instance.OnHmdRotation;
            @hmdRotation.performed += instance.OnHmdRotation;
            @hmdRotation.canceled += instance.OnHmdRotation;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="HMDActions" />
        private void UnregisterCallbacks(IHMDActions instance)
        {
            @hmdPosition.started -= instance.OnHmdPosition;
            @hmdPosition.performed -= instance.OnHmdPosition;
            @hmdPosition.canceled -= instance.OnHmdPosition;
            @hmdRotation.started -= instance.OnHmdRotation;
            @hmdRotation.performed -= instance.OnHmdRotation;
            @hmdRotation.canceled -= instance.OnHmdRotation;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="HMDActions.UnregisterCallbacks(IHMDActions)" />.
        /// </summary>
        /// <seealso cref="HMDActions.UnregisterCallbacks(IHMDActions)" />
        public void RemoveCallbacks(IHMDActions instance)
        {
            if (m_Wrapper.m_HMDActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="HMDActions.AddCallbacks(IHMDActions)" />
        /// <seealso cref="HMDActions.RemoveCallbacks(IHMDActions)" />
        /// <seealso cref="HMDActions.UnregisterCallbacks(IHMDActions)" />
        public void SetCallbacks(IHMDActions instance)
        {
            foreach (var item in m_Wrapper.m_HMDActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HMDActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="HMDActions" /> instance referencing this action map.
    /// </summary>
    public HMDActions @HMD => new HMDActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Click;
    private readonly InputAction m_UI_pointerPosition;
    private readonly InputAction m_UI_pointerRotation;
    private readonly InputAction m_UI_Down;
    /// <summary>
    /// Provides access to input actions defined in input action map "UI".
    /// </summary>
    public struct UIActions
    {
        private @InputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public UIActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "UI/Click".
        /// </summary>
        public InputAction @Click => m_Wrapper.m_UI_Click;
        /// <summary>
        /// Provides access to the underlying input action "UI/pointerPosition".
        /// </summary>
        public InputAction @pointerPosition => m_Wrapper.m_UI_pointerPosition;
        /// <summary>
        /// Provides access to the underlying input action "UI/pointerRotation".
        /// </summary>
        public InputAction @pointerRotation => m_Wrapper.m_UI_pointerRotation;
        /// <summary>
        /// Provides access to the underlying input action "UI/Down".
        /// </summary>
        public InputAction @Down => m_Wrapper.m_UI_Down;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="UIActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="UIActions" />
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @pointerPosition.started += instance.OnPointerPosition;
            @pointerPosition.performed += instance.OnPointerPosition;
            @pointerPosition.canceled += instance.OnPointerPosition;
            @pointerRotation.started += instance.OnPointerRotation;
            @pointerRotation.performed += instance.OnPointerRotation;
            @pointerRotation.canceled += instance.OnPointerRotation;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="UIActions" />
        private void UnregisterCallbacks(IUIActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @pointerPosition.started -= instance.OnPointerPosition;
            @pointerPosition.performed -= instance.OnPointerPosition;
            @pointerPosition.canceled -= instance.OnPointerPosition;
            @pointerRotation.started -= instance.OnPointerRotation;
            @pointerRotation.performed -= instance.OnPointerRotation;
            @pointerRotation.canceled -= instance.OnPointerRotation;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="UIActions.UnregisterCallbacks(IUIActions)" />.
        /// </summary>
        /// <seealso cref="UIActions.UnregisterCallbacks(IUIActions)" />
        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="UIActions.AddCallbacks(IUIActions)" />
        /// <seealso cref="UIActions.RemoveCallbacks(IUIActions)" />
        /// <seealso cref="UIActions.UnregisterCallbacks(IUIActions)" />
        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="UIActions" /> instance referencing this action map.
    /// </summary>
    public UIActions @UI => new UIActions(this);

    // EyeGaze
    private readonly InputActionMap m_EyeGaze;
    private List<IEyeGazeActions> m_EyeGazeActionsCallbackInterfaces = new List<IEyeGazeActions>();
    private readonly InputAction m_EyeGaze_Tracked;
    private readonly InputAction m_EyeGaze_EyePosition;
    private readonly InputAction m_EyeGaze_EyeRotation;
    private readonly InputAction m_EyeGaze_EyePose;
    /// <summary>
    /// Provides access to input actions defined in input action map "EyeGaze".
    /// </summary>
    public struct EyeGazeActions
    {
        private @InputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public EyeGazeActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "EyeGaze/Tracked".
        /// </summary>
        public InputAction @Tracked => m_Wrapper.m_EyeGaze_Tracked;
        /// <summary>
        /// Provides access to the underlying input action "EyeGaze/EyePosition".
        /// </summary>
        public InputAction @EyePosition => m_Wrapper.m_EyeGaze_EyePosition;
        /// <summary>
        /// Provides access to the underlying input action "EyeGaze/EyeRotation".
        /// </summary>
        public InputAction @EyeRotation => m_Wrapper.m_EyeGaze_EyeRotation;
        /// <summary>
        /// Provides access to the underlying input action "EyeGaze/EyePose".
        /// </summary>
        public InputAction @EyePose => m_Wrapper.m_EyeGaze_EyePose;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_EyeGaze; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="EyeGazeActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(EyeGazeActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="EyeGazeActions" />
        public void AddCallbacks(IEyeGazeActions instance)
        {
            if (instance == null || m_Wrapper.m_EyeGazeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EyeGazeActionsCallbackInterfaces.Add(instance);
            @Tracked.started += instance.OnTracked;
            @Tracked.performed += instance.OnTracked;
            @Tracked.canceled += instance.OnTracked;
            @EyePosition.started += instance.OnEyePosition;
            @EyePosition.performed += instance.OnEyePosition;
            @EyePosition.canceled += instance.OnEyePosition;
            @EyeRotation.started += instance.OnEyeRotation;
            @EyeRotation.performed += instance.OnEyeRotation;
            @EyeRotation.canceled += instance.OnEyeRotation;
            @EyePose.started += instance.OnEyePose;
            @EyePose.performed += instance.OnEyePose;
            @EyePose.canceled += instance.OnEyePose;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="EyeGazeActions" />
        private void UnregisterCallbacks(IEyeGazeActions instance)
        {
            @Tracked.started -= instance.OnTracked;
            @Tracked.performed -= instance.OnTracked;
            @Tracked.canceled -= instance.OnTracked;
            @EyePosition.started -= instance.OnEyePosition;
            @EyePosition.performed -= instance.OnEyePosition;
            @EyePosition.canceled -= instance.OnEyePosition;
            @EyeRotation.started -= instance.OnEyeRotation;
            @EyeRotation.performed -= instance.OnEyeRotation;
            @EyeRotation.canceled -= instance.OnEyeRotation;
            @EyePose.started -= instance.OnEyePose;
            @EyePose.performed -= instance.OnEyePose;
            @EyePose.canceled -= instance.OnEyePose;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="EyeGazeActions.UnregisterCallbacks(IEyeGazeActions)" />.
        /// </summary>
        /// <seealso cref="EyeGazeActions.UnregisterCallbacks(IEyeGazeActions)" />
        public void RemoveCallbacks(IEyeGazeActions instance)
        {
            if (m_Wrapper.m_EyeGazeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="EyeGazeActions.AddCallbacks(IEyeGazeActions)" />
        /// <seealso cref="EyeGazeActions.RemoveCallbacks(IEyeGazeActions)" />
        /// <seealso cref="EyeGazeActions.UnregisterCallbacks(IEyeGazeActions)" />
        public void SetCallbacks(IEyeGazeActions instance)
        {
            foreach (var item in m_Wrapper.m_EyeGazeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EyeGazeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="EyeGazeActions" /> instance referencing this action map.
    /// </summary>
    public EyeGazeActions @EyeGaze => new EyeGazeActions(this);

    // LeftHandInteraction
    private readonly InputActionMap m_LeftHandInteraction;
    private List<ILeftHandInteractionActions> m_LeftHandInteractionActionsCallbackInterfaces = new List<ILeftHandInteractionActions>();
    private readonly InputAction m_LeftHandInteraction_GripValue;
    private readonly InputAction m_LeftHandInteraction_SelectValue;
    private readonly InputAction m_LeftHandInteraction_IsTracked;
    private readonly InputAction m_LeftHandInteraction_TrackingState;
    private readonly InputAction m_LeftHandInteraction_DevicePose;
    private readonly InputAction m_LeftHandInteraction_DevicePosition;
    private readonly InputAction m_LeftHandInteraction_DeviceRotation;
    private readonly InputAction m_LeftHandInteraction_Pointer;
    /// <summary>
    /// Provides access to input actions defined in input action map "LeftHandInteraction".
    /// </summary>
    public struct LeftHandInteractionActions
    {
        private @InputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public LeftHandInteractionActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "LeftHandInteraction/GripValue".
        /// </summary>
        public InputAction @GripValue => m_Wrapper.m_LeftHandInteraction_GripValue;
        /// <summary>
        /// Provides access to the underlying input action "LeftHandInteraction/SelectValue".
        /// </summary>
        public InputAction @SelectValue => m_Wrapper.m_LeftHandInteraction_SelectValue;
        /// <summary>
        /// Provides access to the underlying input action "LeftHandInteraction/IsTracked".
        /// </summary>
        public InputAction @IsTracked => m_Wrapper.m_LeftHandInteraction_IsTracked;
        /// <summary>
        /// Provides access to the underlying input action "LeftHandInteraction/TrackingState".
        /// </summary>
        public InputAction @TrackingState => m_Wrapper.m_LeftHandInteraction_TrackingState;
        /// <summary>
        /// Provides access to the underlying input action "LeftHandInteraction/DevicePose".
        /// </summary>
        public InputAction @DevicePose => m_Wrapper.m_LeftHandInteraction_DevicePose;
        /// <summary>
        /// Provides access to the underlying input action "LeftHandInteraction/DevicePosition".
        /// </summary>
        public InputAction @DevicePosition => m_Wrapper.m_LeftHandInteraction_DevicePosition;
        /// <summary>
        /// Provides access to the underlying input action "LeftHandInteraction/DeviceRotation".
        /// </summary>
        public InputAction @DeviceRotation => m_Wrapper.m_LeftHandInteraction_DeviceRotation;
        /// <summary>
        /// Provides access to the underlying input action "LeftHandInteraction/Pointer".
        /// </summary>
        public InputAction @Pointer => m_Wrapper.m_LeftHandInteraction_Pointer;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_LeftHandInteraction; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="LeftHandInteractionActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(LeftHandInteractionActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="LeftHandInteractionActions" />
        public void AddCallbacks(ILeftHandInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftHandInteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftHandInteractionActionsCallbackInterfaces.Add(instance);
            @GripValue.started += instance.OnGripValue;
            @GripValue.performed += instance.OnGripValue;
            @GripValue.canceled += instance.OnGripValue;
            @SelectValue.started += instance.OnSelectValue;
            @SelectValue.performed += instance.OnSelectValue;
            @SelectValue.canceled += instance.OnSelectValue;
            @IsTracked.started += instance.OnIsTracked;
            @IsTracked.performed += instance.OnIsTracked;
            @IsTracked.canceled += instance.OnIsTracked;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @DevicePose.started += instance.OnDevicePose;
            @DevicePose.performed += instance.OnDevicePose;
            @DevicePose.canceled += instance.OnDevicePose;
            @DevicePosition.started += instance.OnDevicePosition;
            @DevicePosition.performed += instance.OnDevicePosition;
            @DevicePosition.canceled += instance.OnDevicePosition;
            @DeviceRotation.started += instance.OnDeviceRotation;
            @DeviceRotation.performed += instance.OnDeviceRotation;
            @DeviceRotation.canceled += instance.OnDeviceRotation;
            @Pointer.started += instance.OnPointer;
            @Pointer.performed += instance.OnPointer;
            @Pointer.canceled += instance.OnPointer;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="LeftHandInteractionActions" />
        private void UnregisterCallbacks(ILeftHandInteractionActions instance)
        {
            @GripValue.started -= instance.OnGripValue;
            @GripValue.performed -= instance.OnGripValue;
            @GripValue.canceled -= instance.OnGripValue;
            @SelectValue.started -= instance.OnSelectValue;
            @SelectValue.performed -= instance.OnSelectValue;
            @SelectValue.canceled -= instance.OnSelectValue;
            @IsTracked.started -= instance.OnIsTracked;
            @IsTracked.performed -= instance.OnIsTracked;
            @IsTracked.canceled -= instance.OnIsTracked;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @DevicePose.started -= instance.OnDevicePose;
            @DevicePose.performed -= instance.OnDevicePose;
            @DevicePose.canceled -= instance.OnDevicePose;
            @DevicePosition.started -= instance.OnDevicePosition;
            @DevicePosition.performed -= instance.OnDevicePosition;
            @DevicePosition.canceled -= instance.OnDevicePosition;
            @DeviceRotation.started -= instance.OnDeviceRotation;
            @DeviceRotation.performed -= instance.OnDeviceRotation;
            @DeviceRotation.canceled -= instance.OnDeviceRotation;
            @Pointer.started -= instance.OnPointer;
            @Pointer.performed -= instance.OnPointer;
            @Pointer.canceled -= instance.OnPointer;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="LeftHandInteractionActions.UnregisterCallbacks(ILeftHandInteractionActions)" />.
        /// </summary>
        /// <seealso cref="LeftHandInteractionActions.UnregisterCallbacks(ILeftHandInteractionActions)" />
        public void RemoveCallbacks(ILeftHandInteractionActions instance)
        {
            if (m_Wrapper.m_LeftHandInteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="LeftHandInteractionActions.AddCallbacks(ILeftHandInteractionActions)" />
        /// <seealso cref="LeftHandInteractionActions.RemoveCallbacks(ILeftHandInteractionActions)" />
        /// <seealso cref="LeftHandInteractionActions.UnregisterCallbacks(ILeftHandInteractionActions)" />
        public void SetCallbacks(ILeftHandInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftHandInteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftHandInteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="LeftHandInteractionActions" /> instance referencing this action map.
    /// </summary>
    public LeftHandInteractionActions @LeftHandInteraction => new LeftHandInteractionActions(this);

    // RightHandInteraction
    private readonly InputActionMap m_RightHandInteraction;
    private List<IRightHandInteractionActions> m_RightHandInteractionActionsCallbackInterfaces = new List<IRightHandInteractionActions>();
    private readonly InputAction m_RightHandInteraction_GripValue;
    private readonly InputAction m_RightHandInteraction_SelectValue;
    private readonly InputAction m_RightHandInteraction_IsTracked;
    private readonly InputAction m_RightHandInteraction_TrackingState;
    private readonly InputAction m_RightHandInteraction_DevicePose;
    private readonly InputAction m_RightHandInteraction_DevicePosition;
    private readonly InputAction m_RightHandInteraction_DeviceRotation;
    private readonly InputAction m_RightHandInteraction_Pointer;
    /// <summary>
    /// Provides access to input actions defined in input action map "RightHandInteraction".
    /// </summary>
    public struct RightHandInteractionActions
    {
        private @InputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public RightHandInteractionActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "RightHandInteraction/GripValue".
        /// </summary>
        public InputAction @GripValue => m_Wrapper.m_RightHandInteraction_GripValue;
        /// <summary>
        /// Provides access to the underlying input action "RightHandInteraction/SelectValue".
        /// </summary>
        public InputAction @SelectValue => m_Wrapper.m_RightHandInteraction_SelectValue;
        /// <summary>
        /// Provides access to the underlying input action "RightHandInteraction/IsTracked".
        /// </summary>
        public InputAction @IsTracked => m_Wrapper.m_RightHandInteraction_IsTracked;
        /// <summary>
        /// Provides access to the underlying input action "RightHandInteraction/TrackingState".
        /// </summary>
        public InputAction @TrackingState => m_Wrapper.m_RightHandInteraction_TrackingState;
        /// <summary>
        /// Provides access to the underlying input action "RightHandInteraction/DevicePose".
        /// </summary>
        public InputAction @DevicePose => m_Wrapper.m_RightHandInteraction_DevicePose;
        /// <summary>
        /// Provides access to the underlying input action "RightHandInteraction/DevicePosition".
        /// </summary>
        public InputAction @DevicePosition => m_Wrapper.m_RightHandInteraction_DevicePosition;
        /// <summary>
        /// Provides access to the underlying input action "RightHandInteraction/DeviceRotation".
        /// </summary>
        public InputAction @DeviceRotation => m_Wrapper.m_RightHandInteraction_DeviceRotation;
        /// <summary>
        /// Provides access to the underlying input action "RightHandInteraction/Pointer".
        /// </summary>
        public InputAction @Pointer => m_Wrapper.m_RightHandInteraction_Pointer;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_RightHandInteraction; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="RightHandInteractionActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(RightHandInteractionActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="RightHandInteractionActions" />
        public void AddCallbacks(IRightHandInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_RightHandInteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightHandInteractionActionsCallbackInterfaces.Add(instance);
            @GripValue.started += instance.OnGripValue;
            @GripValue.performed += instance.OnGripValue;
            @GripValue.canceled += instance.OnGripValue;
            @SelectValue.started += instance.OnSelectValue;
            @SelectValue.performed += instance.OnSelectValue;
            @SelectValue.canceled += instance.OnSelectValue;
            @IsTracked.started += instance.OnIsTracked;
            @IsTracked.performed += instance.OnIsTracked;
            @IsTracked.canceled += instance.OnIsTracked;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @DevicePose.started += instance.OnDevicePose;
            @DevicePose.performed += instance.OnDevicePose;
            @DevicePose.canceled += instance.OnDevicePose;
            @DevicePosition.started += instance.OnDevicePosition;
            @DevicePosition.performed += instance.OnDevicePosition;
            @DevicePosition.canceled += instance.OnDevicePosition;
            @DeviceRotation.started += instance.OnDeviceRotation;
            @DeviceRotation.performed += instance.OnDeviceRotation;
            @DeviceRotation.canceled += instance.OnDeviceRotation;
            @Pointer.started += instance.OnPointer;
            @Pointer.performed += instance.OnPointer;
            @Pointer.canceled += instance.OnPointer;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="RightHandInteractionActions" />
        private void UnregisterCallbacks(IRightHandInteractionActions instance)
        {
            @GripValue.started -= instance.OnGripValue;
            @GripValue.performed -= instance.OnGripValue;
            @GripValue.canceled -= instance.OnGripValue;
            @SelectValue.started -= instance.OnSelectValue;
            @SelectValue.performed -= instance.OnSelectValue;
            @SelectValue.canceled -= instance.OnSelectValue;
            @IsTracked.started -= instance.OnIsTracked;
            @IsTracked.performed -= instance.OnIsTracked;
            @IsTracked.canceled -= instance.OnIsTracked;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @DevicePose.started -= instance.OnDevicePose;
            @DevicePose.performed -= instance.OnDevicePose;
            @DevicePose.canceled -= instance.OnDevicePose;
            @DevicePosition.started -= instance.OnDevicePosition;
            @DevicePosition.performed -= instance.OnDevicePosition;
            @DevicePosition.canceled -= instance.OnDevicePosition;
            @DeviceRotation.started -= instance.OnDeviceRotation;
            @DeviceRotation.performed -= instance.OnDeviceRotation;
            @DeviceRotation.canceled -= instance.OnDeviceRotation;
            @Pointer.started -= instance.OnPointer;
            @Pointer.performed -= instance.OnPointer;
            @Pointer.canceled -= instance.OnPointer;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="RightHandInteractionActions.UnregisterCallbacks(IRightHandInteractionActions)" />.
        /// </summary>
        /// <seealso cref="RightHandInteractionActions.UnregisterCallbacks(IRightHandInteractionActions)" />
        public void RemoveCallbacks(IRightHandInteractionActions instance)
        {
            if (m_Wrapper.m_RightHandInteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="RightHandInteractionActions.AddCallbacks(IRightHandInteractionActions)" />
        /// <seealso cref="RightHandInteractionActions.RemoveCallbacks(IRightHandInteractionActions)" />
        /// <seealso cref="RightHandInteractionActions.UnregisterCallbacks(IRightHandInteractionActions)" />
        public void SetCallbacks(IRightHandInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_RightHandInteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightHandInteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="RightHandInteractionActions" /> instance referencing this action map.
    /// </summary>
    public RightHandInteractionActions @RightHandInteraction => new RightHandInteractionActions(this);

    // LeftWristTracker
    private readonly InputActionMap m_LeftWristTracker;
    private List<ILeftWristTrackerActions> m_LeftWristTrackerActionsCallbackInterfaces = new List<ILeftWristTrackerActions>();
    private readonly InputAction m_LeftWristTracker_IsTracked;
    private readonly InputAction m_LeftWristTracker_TrackingState;
    private readonly InputAction m_LeftWristTracker_DevicePose;
    private readonly InputAction m_LeftWristTracker_DevicePosition;
    private readonly InputAction m_LeftWristTracker_DeviceRotation;
    private readonly InputAction m_LeftWristTracker_PrimaryButton;
    private readonly InputAction m_LeftWristTracker_Menu;
    /// <summary>
    /// Provides access to input actions defined in input action map "LeftWristTracker".
    /// </summary>
    public struct LeftWristTrackerActions
    {
        private @InputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public LeftWristTrackerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "LeftWristTracker/IsTracked".
        /// </summary>
        public InputAction @IsTracked => m_Wrapper.m_LeftWristTracker_IsTracked;
        /// <summary>
        /// Provides access to the underlying input action "LeftWristTracker/TrackingState".
        /// </summary>
        public InputAction @TrackingState => m_Wrapper.m_LeftWristTracker_TrackingState;
        /// <summary>
        /// Provides access to the underlying input action "LeftWristTracker/DevicePose".
        /// </summary>
        public InputAction @DevicePose => m_Wrapper.m_LeftWristTracker_DevicePose;
        /// <summary>
        /// Provides access to the underlying input action "LeftWristTracker/DevicePosition".
        /// </summary>
        public InputAction @DevicePosition => m_Wrapper.m_LeftWristTracker_DevicePosition;
        /// <summary>
        /// Provides access to the underlying input action "LeftWristTracker/DeviceRotation".
        /// </summary>
        public InputAction @DeviceRotation => m_Wrapper.m_LeftWristTracker_DeviceRotation;
        /// <summary>
        /// Provides access to the underlying input action "LeftWristTracker/PrimaryButton".
        /// </summary>
        public InputAction @PrimaryButton => m_Wrapper.m_LeftWristTracker_PrimaryButton;
        /// <summary>
        /// Provides access to the underlying input action "LeftWristTracker/Menu".
        /// </summary>
        public InputAction @Menu => m_Wrapper.m_LeftWristTracker_Menu;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_LeftWristTracker; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="LeftWristTrackerActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(LeftWristTrackerActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="LeftWristTrackerActions" />
        public void AddCallbacks(ILeftWristTrackerActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftWristTrackerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftWristTrackerActionsCallbackInterfaces.Add(instance);
            @IsTracked.started += instance.OnIsTracked;
            @IsTracked.performed += instance.OnIsTracked;
            @IsTracked.canceled += instance.OnIsTracked;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @DevicePose.started += instance.OnDevicePose;
            @DevicePose.performed += instance.OnDevicePose;
            @DevicePose.canceled += instance.OnDevicePose;
            @DevicePosition.started += instance.OnDevicePosition;
            @DevicePosition.performed += instance.OnDevicePosition;
            @DevicePosition.canceled += instance.OnDevicePosition;
            @DeviceRotation.started += instance.OnDeviceRotation;
            @DeviceRotation.performed += instance.OnDeviceRotation;
            @DeviceRotation.canceled += instance.OnDeviceRotation;
            @PrimaryButton.started += instance.OnPrimaryButton;
            @PrimaryButton.performed += instance.OnPrimaryButton;
            @PrimaryButton.canceled += instance.OnPrimaryButton;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="LeftWristTrackerActions" />
        private void UnregisterCallbacks(ILeftWristTrackerActions instance)
        {
            @IsTracked.started -= instance.OnIsTracked;
            @IsTracked.performed -= instance.OnIsTracked;
            @IsTracked.canceled -= instance.OnIsTracked;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @DevicePose.started -= instance.OnDevicePose;
            @DevicePose.performed -= instance.OnDevicePose;
            @DevicePose.canceled -= instance.OnDevicePose;
            @DevicePosition.started -= instance.OnDevicePosition;
            @DevicePosition.performed -= instance.OnDevicePosition;
            @DevicePosition.canceled -= instance.OnDevicePosition;
            @DeviceRotation.started -= instance.OnDeviceRotation;
            @DeviceRotation.performed -= instance.OnDeviceRotation;
            @DeviceRotation.canceled -= instance.OnDeviceRotation;
            @PrimaryButton.started -= instance.OnPrimaryButton;
            @PrimaryButton.performed -= instance.OnPrimaryButton;
            @PrimaryButton.canceled -= instance.OnPrimaryButton;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="LeftWristTrackerActions.UnregisterCallbacks(ILeftWristTrackerActions)" />.
        /// </summary>
        /// <seealso cref="LeftWristTrackerActions.UnregisterCallbacks(ILeftWristTrackerActions)" />
        public void RemoveCallbacks(ILeftWristTrackerActions instance)
        {
            if (m_Wrapper.m_LeftWristTrackerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="LeftWristTrackerActions.AddCallbacks(ILeftWristTrackerActions)" />
        /// <seealso cref="LeftWristTrackerActions.RemoveCallbacks(ILeftWristTrackerActions)" />
        /// <seealso cref="LeftWristTrackerActions.UnregisterCallbacks(ILeftWristTrackerActions)" />
        public void SetCallbacks(ILeftWristTrackerActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftWristTrackerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftWristTrackerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="LeftWristTrackerActions" /> instance referencing this action map.
    /// </summary>
    public LeftWristTrackerActions @LeftWristTracker => new LeftWristTrackerActions(this);

    // RightWristTracker
    private readonly InputActionMap m_RightWristTracker;
    private List<IRightWristTrackerActions> m_RightWristTrackerActionsCallbackInterfaces = new List<IRightWristTrackerActions>();
    private readonly InputAction m_RightWristTracker_IsTracked;
    private readonly InputAction m_RightWristTracker_TrackingState;
    private readonly InputAction m_RightWristTracker_DevicePose;
    private readonly InputAction m_RightWristTracker_DevicePosition;
    private readonly InputAction m_RightWristTracker_DeviceRotation;
    private readonly InputAction m_RightWristTracker_PrimaryButton;
    private readonly InputAction m_RightWristTracker_Menu;
    /// <summary>
    /// Provides access to input actions defined in input action map "RightWristTracker".
    /// </summary>
    public struct RightWristTrackerActions
    {
        private @InputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public RightWristTrackerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "RightWristTracker/IsTracked".
        /// </summary>
        public InputAction @IsTracked => m_Wrapper.m_RightWristTracker_IsTracked;
        /// <summary>
        /// Provides access to the underlying input action "RightWristTracker/TrackingState".
        /// </summary>
        public InputAction @TrackingState => m_Wrapper.m_RightWristTracker_TrackingState;
        /// <summary>
        /// Provides access to the underlying input action "RightWristTracker/DevicePose".
        /// </summary>
        public InputAction @DevicePose => m_Wrapper.m_RightWristTracker_DevicePose;
        /// <summary>
        /// Provides access to the underlying input action "RightWristTracker/DevicePosition".
        /// </summary>
        public InputAction @DevicePosition => m_Wrapper.m_RightWristTracker_DevicePosition;
        /// <summary>
        /// Provides access to the underlying input action "RightWristTracker/DeviceRotation".
        /// </summary>
        public InputAction @DeviceRotation => m_Wrapper.m_RightWristTracker_DeviceRotation;
        /// <summary>
        /// Provides access to the underlying input action "RightWristTracker/PrimaryButton".
        /// </summary>
        public InputAction @PrimaryButton => m_Wrapper.m_RightWristTracker_PrimaryButton;
        /// <summary>
        /// Provides access to the underlying input action "RightWristTracker/Menu".
        /// </summary>
        public InputAction @Menu => m_Wrapper.m_RightWristTracker_Menu;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_RightWristTracker; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="RightWristTrackerActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(RightWristTrackerActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="RightWristTrackerActions" />
        public void AddCallbacks(IRightWristTrackerActions instance)
        {
            if (instance == null || m_Wrapper.m_RightWristTrackerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightWristTrackerActionsCallbackInterfaces.Add(instance);
            @IsTracked.started += instance.OnIsTracked;
            @IsTracked.performed += instance.OnIsTracked;
            @IsTracked.canceled += instance.OnIsTracked;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @DevicePose.started += instance.OnDevicePose;
            @DevicePose.performed += instance.OnDevicePose;
            @DevicePose.canceled += instance.OnDevicePose;
            @DevicePosition.started += instance.OnDevicePosition;
            @DevicePosition.performed += instance.OnDevicePosition;
            @DevicePosition.canceled += instance.OnDevicePosition;
            @DeviceRotation.started += instance.OnDeviceRotation;
            @DeviceRotation.performed += instance.OnDeviceRotation;
            @DeviceRotation.canceled += instance.OnDeviceRotation;
            @PrimaryButton.started += instance.OnPrimaryButton;
            @PrimaryButton.performed += instance.OnPrimaryButton;
            @PrimaryButton.canceled += instance.OnPrimaryButton;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="RightWristTrackerActions" />
        private void UnregisterCallbacks(IRightWristTrackerActions instance)
        {
            @IsTracked.started -= instance.OnIsTracked;
            @IsTracked.performed -= instance.OnIsTracked;
            @IsTracked.canceled -= instance.OnIsTracked;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @DevicePose.started -= instance.OnDevicePose;
            @DevicePose.performed -= instance.OnDevicePose;
            @DevicePose.canceled -= instance.OnDevicePose;
            @DevicePosition.started -= instance.OnDevicePosition;
            @DevicePosition.performed -= instance.OnDevicePosition;
            @DevicePosition.canceled -= instance.OnDevicePosition;
            @DeviceRotation.started -= instance.OnDeviceRotation;
            @DeviceRotation.performed -= instance.OnDeviceRotation;
            @DeviceRotation.canceled -= instance.OnDeviceRotation;
            @PrimaryButton.started -= instance.OnPrimaryButton;
            @PrimaryButton.performed -= instance.OnPrimaryButton;
            @PrimaryButton.canceled -= instance.OnPrimaryButton;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="RightWristTrackerActions.UnregisterCallbacks(IRightWristTrackerActions)" />.
        /// </summary>
        /// <seealso cref="RightWristTrackerActions.UnregisterCallbacks(IRightWristTrackerActions)" />
        public void RemoveCallbacks(IRightWristTrackerActions instance)
        {
            if (m_Wrapper.m_RightWristTrackerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="RightWristTrackerActions.AddCallbacks(IRightWristTrackerActions)" />
        /// <seealso cref="RightWristTrackerActions.RemoveCallbacks(IRightWristTrackerActions)" />
        /// <seealso cref="RightWristTrackerActions.UnregisterCallbacks(IRightWristTrackerActions)" />
        public void SetCallbacks(IRightWristTrackerActions instance)
        {
            foreach (var item in m_Wrapper.m_RightWristTrackerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightWristTrackerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="RightWristTrackerActions" /> instance referencing this action map.
    /// </summary>
    public RightWristTrackerActions @RightWristTracker => new RightWristTrackerActions(this);

    // XRTracker
    private readonly InputActionMap m_XRTracker;
    private List<IXRTrackerActions> m_XRTrackerActionsCallbackInterfaces = new List<IXRTrackerActions>();
    private readonly InputAction m_XRTracker_UltimateTrackerIsTracked0;
    private readonly InputAction m_XRTracker_UltimateTrackerIsTracked1;
    private readonly InputAction m_XRTracker_UltimateTrackerIsTracked2;
    private readonly InputAction m_XRTracker_UltimateTrackerIsTracked3;
    private readonly InputAction m_XRTracker_UltimateTrackerIsTracked4;
    private readonly InputAction m_XRTracker_UltimateTrackerTrackingState0;
    private readonly InputAction m_XRTracker_UltimateTrackerTrackingState1;
    private readonly InputAction m_XRTracker_UltimateTrackerTrackingState2;
    private readonly InputAction m_XRTracker_UltimateTrackerTrackingState3;
    private readonly InputAction m_XRTracker_UltimateTrackerTrackingState4;
    private readonly InputAction m_XRTracker_UltimateTrackerPosition0;
    private readonly InputAction m_XRTracker_UltimateTrackerPosition1;
    private readonly InputAction m_XRTracker_UltimateTrackerPosition2;
    private readonly InputAction m_XRTracker_UltimateTrackerPosition3;
    private readonly InputAction m_XRTracker_UltimateTrackerPosition4;
    private readonly InputAction m_XRTracker_UltimateTrackerRotation0;
    private readonly InputAction m_XRTracker_UltimateTrackerRotation1;
    private readonly InputAction m_XRTracker_UltimateTrackerRotation2;
    private readonly InputAction m_XRTracker_UltimateTrackerRotation3;
    private readonly InputAction m_XRTracker_UltimateTrackerRotation4;
    private readonly InputAction m_XRTracker_UltimateTrackerMenu0;
    private readonly InputAction m_XRTracker_UltimateTrackerMenu1;
    private readonly InputAction m_XRTracker_UltimateTrackerMenu2;
    private readonly InputAction m_XRTracker_UltimateTrackerMenu3;
    private readonly InputAction m_XRTracker_UltimateTrackerMenu4;
    private readonly InputAction m_XRTracker_UltimateTrackerGripPress0;
    private readonly InputAction m_XRTracker_UltimateTrackerGripPress1;
    private readonly InputAction m_XRTracker_UltimateTrackerGripPress2;
    private readonly InputAction m_XRTracker_UltimateTrackerGripPress3;
    private readonly InputAction m_XRTracker_UltimateTrackerGripPress4;
    private readonly InputAction m_XRTracker_UltimateTrackerTriggerPress0;
    private readonly InputAction m_XRTracker_UltimateTrackerTriggerPress1;
    private readonly InputAction m_XRTracker_UltimateTrackerTriggerPress2;
    private readonly InputAction m_XRTracker_UltimateTrackerTriggerPress3;
    private readonly InputAction m_XRTracker_UltimateTrackerTriggerPress4;
    private readonly InputAction m_XRTracker_UltimateTrackerTrackpadPress0;
    private readonly InputAction m_XRTracker_UltimateTrackerTrackpadPress1;
    private readonly InputAction m_XRTracker_UltimateTrackerTrackpadPress2;
    private readonly InputAction m_XRTracker_UltimateTrackerTrackpadPress3;
    private readonly InputAction m_XRTracker_UltimateTrackerTrackpadPress4;
    private readonly InputAction m_XRTracker_UltimateTrackerTrackpadTouch0;
    private readonly InputAction m_XRTracker_UltimateTrackerTrackpadTouch1;
    private readonly InputAction m_XRTracker_UltimateTrackerTrackpadTouch2;
    private readonly InputAction m_XRTracker_UltimateTrackerTrackpadTouch3;
    private readonly InputAction m_XRTracker_UltimateTrackerTrackpadTouch4;
    /// <summary>
    /// Provides access to input actions defined in input action map "XRTracker".
    /// </summary>
    public struct XRTrackerActions
    {
        private @InputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public XRTrackerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerIsTracked0".
        /// </summary>
        public InputAction @UltimateTrackerIsTracked0 => m_Wrapper.m_XRTracker_UltimateTrackerIsTracked0;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerIsTracked1".
        /// </summary>
        public InputAction @UltimateTrackerIsTracked1 => m_Wrapper.m_XRTracker_UltimateTrackerIsTracked1;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerIsTracked2".
        /// </summary>
        public InputAction @UltimateTrackerIsTracked2 => m_Wrapper.m_XRTracker_UltimateTrackerIsTracked2;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerIsTracked3".
        /// </summary>
        public InputAction @UltimateTrackerIsTracked3 => m_Wrapper.m_XRTracker_UltimateTrackerIsTracked3;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerIsTracked4".
        /// </summary>
        public InputAction @UltimateTrackerIsTracked4 => m_Wrapper.m_XRTracker_UltimateTrackerIsTracked4;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerTrackingState0".
        /// </summary>
        public InputAction @UltimateTrackerTrackingState0 => m_Wrapper.m_XRTracker_UltimateTrackerTrackingState0;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerTrackingState1".
        /// </summary>
        public InputAction @UltimateTrackerTrackingState1 => m_Wrapper.m_XRTracker_UltimateTrackerTrackingState1;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerTrackingState2".
        /// </summary>
        public InputAction @UltimateTrackerTrackingState2 => m_Wrapper.m_XRTracker_UltimateTrackerTrackingState2;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerTrackingState3".
        /// </summary>
        public InputAction @UltimateTrackerTrackingState3 => m_Wrapper.m_XRTracker_UltimateTrackerTrackingState3;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerTrackingState4".
        /// </summary>
        public InputAction @UltimateTrackerTrackingState4 => m_Wrapper.m_XRTracker_UltimateTrackerTrackingState4;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerPosition0".
        /// </summary>
        public InputAction @UltimateTrackerPosition0 => m_Wrapper.m_XRTracker_UltimateTrackerPosition0;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerPosition1".
        /// </summary>
        public InputAction @UltimateTrackerPosition1 => m_Wrapper.m_XRTracker_UltimateTrackerPosition1;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerPosition2".
        /// </summary>
        public InputAction @UltimateTrackerPosition2 => m_Wrapper.m_XRTracker_UltimateTrackerPosition2;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerPosition3".
        /// </summary>
        public InputAction @UltimateTrackerPosition3 => m_Wrapper.m_XRTracker_UltimateTrackerPosition3;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerPosition4".
        /// </summary>
        public InputAction @UltimateTrackerPosition4 => m_Wrapper.m_XRTracker_UltimateTrackerPosition4;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerRotation0".
        /// </summary>
        public InputAction @UltimateTrackerRotation0 => m_Wrapper.m_XRTracker_UltimateTrackerRotation0;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerRotation1".
        /// </summary>
        public InputAction @UltimateTrackerRotation1 => m_Wrapper.m_XRTracker_UltimateTrackerRotation1;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerRotation2".
        /// </summary>
        public InputAction @UltimateTrackerRotation2 => m_Wrapper.m_XRTracker_UltimateTrackerRotation2;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerRotation3".
        /// </summary>
        public InputAction @UltimateTrackerRotation3 => m_Wrapper.m_XRTracker_UltimateTrackerRotation3;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerRotation4".
        /// </summary>
        public InputAction @UltimateTrackerRotation4 => m_Wrapper.m_XRTracker_UltimateTrackerRotation4;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerMenu0".
        /// </summary>
        public InputAction @UltimateTrackerMenu0 => m_Wrapper.m_XRTracker_UltimateTrackerMenu0;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerMenu1".
        /// </summary>
        public InputAction @UltimateTrackerMenu1 => m_Wrapper.m_XRTracker_UltimateTrackerMenu1;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerMenu2".
        /// </summary>
        public InputAction @UltimateTrackerMenu2 => m_Wrapper.m_XRTracker_UltimateTrackerMenu2;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerMenu3".
        /// </summary>
        public InputAction @UltimateTrackerMenu3 => m_Wrapper.m_XRTracker_UltimateTrackerMenu3;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerMenu4".
        /// </summary>
        public InputAction @UltimateTrackerMenu4 => m_Wrapper.m_XRTracker_UltimateTrackerMenu4;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerGripPress0".
        /// </summary>
        public InputAction @UltimateTrackerGripPress0 => m_Wrapper.m_XRTracker_UltimateTrackerGripPress0;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerGripPress1".
        /// </summary>
        public InputAction @UltimateTrackerGripPress1 => m_Wrapper.m_XRTracker_UltimateTrackerGripPress1;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerGripPress2".
        /// </summary>
        public InputAction @UltimateTrackerGripPress2 => m_Wrapper.m_XRTracker_UltimateTrackerGripPress2;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerGripPress3".
        /// </summary>
        public InputAction @UltimateTrackerGripPress3 => m_Wrapper.m_XRTracker_UltimateTrackerGripPress3;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerGripPress4".
        /// </summary>
        public InputAction @UltimateTrackerGripPress4 => m_Wrapper.m_XRTracker_UltimateTrackerGripPress4;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerTriggerPress0".
        /// </summary>
        public InputAction @UltimateTrackerTriggerPress0 => m_Wrapper.m_XRTracker_UltimateTrackerTriggerPress0;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerTriggerPress1".
        /// </summary>
        public InputAction @UltimateTrackerTriggerPress1 => m_Wrapper.m_XRTracker_UltimateTrackerTriggerPress1;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerTriggerPress2".
        /// </summary>
        public InputAction @UltimateTrackerTriggerPress2 => m_Wrapper.m_XRTracker_UltimateTrackerTriggerPress2;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerTriggerPress3".
        /// </summary>
        public InputAction @UltimateTrackerTriggerPress3 => m_Wrapper.m_XRTracker_UltimateTrackerTriggerPress3;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerTriggerPress4".
        /// </summary>
        public InputAction @UltimateTrackerTriggerPress4 => m_Wrapper.m_XRTracker_UltimateTrackerTriggerPress4;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerTrackpadPress0".
        /// </summary>
        public InputAction @UltimateTrackerTrackpadPress0 => m_Wrapper.m_XRTracker_UltimateTrackerTrackpadPress0;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerTrackpadPress1".
        /// </summary>
        public InputAction @UltimateTrackerTrackpadPress1 => m_Wrapper.m_XRTracker_UltimateTrackerTrackpadPress1;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerTrackpadPress2".
        /// </summary>
        public InputAction @UltimateTrackerTrackpadPress2 => m_Wrapper.m_XRTracker_UltimateTrackerTrackpadPress2;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerTrackpadPress3".
        /// </summary>
        public InputAction @UltimateTrackerTrackpadPress3 => m_Wrapper.m_XRTracker_UltimateTrackerTrackpadPress3;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerTrackpadPress4".
        /// </summary>
        public InputAction @UltimateTrackerTrackpadPress4 => m_Wrapper.m_XRTracker_UltimateTrackerTrackpadPress4;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerTrackpadTouch0".
        /// </summary>
        public InputAction @UltimateTrackerTrackpadTouch0 => m_Wrapper.m_XRTracker_UltimateTrackerTrackpadTouch0;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerTrackpadTouch1".
        /// </summary>
        public InputAction @UltimateTrackerTrackpadTouch1 => m_Wrapper.m_XRTracker_UltimateTrackerTrackpadTouch1;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerTrackpadTouch2".
        /// </summary>
        public InputAction @UltimateTrackerTrackpadTouch2 => m_Wrapper.m_XRTracker_UltimateTrackerTrackpadTouch2;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerTrackpadTouch3".
        /// </summary>
        public InputAction @UltimateTrackerTrackpadTouch3 => m_Wrapper.m_XRTracker_UltimateTrackerTrackpadTouch3;
        /// <summary>
        /// Provides access to the underlying input action "XRTracker/UltimateTrackerTrackpadTouch4".
        /// </summary>
        public InputAction @UltimateTrackerTrackpadTouch4 => m_Wrapper.m_XRTracker_UltimateTrackerTrackpadTouch4;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_XRTracker; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="XRTrackerActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(XRTrackerActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="XRTrackerActions" />
        public void AddCallbacks(IXRTrackerActions instance)
        {
            if (instance == null || m_Wrapper.m_XRTrackerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRTrackerActionsCallbackInterfaces.Add(instance);
            @UltimateTrackerIsTracked0.started += instance.OnUltimateTrackerIsTracked0;
            @UltimateTrackerIsTracked0.performed += instance.OnUltimateTrackerIsTracked0;
            @UltimateTrackerIsTracked0.canceled += instance.OnUltimateTrackerIsTracked0;
            @UltimateTrackerIsTracked1.started += instance.OnUltimateTrackerIsTracked1;
            @UltimateTrackerIsTracked1.performed += instance.OnUltimateTrackerIsTracked1;
            @UltimateTrackerIsTracked1.canceled += instance.OnUltimateTrackerIsTracked1;
            @UltimateTrackerIsTracked2.started += instance.OnUltimateTrackerIsTracked2;
            @UltimateTrackerIsTracked2.performed += instance.OnUltimateTrackerIsTracked2;
            @UltimateTrackerIsTracked2.canceled += instance.OnUltimateTrackerIsTracked2;
            @UltimateTrackerIsTracked3.started += instance.OnUltimateTrackerIsTracked3;
            @UltimateTrackerIsTracked3.performed += instance.OnUltimateTrackerIsTracked3;
            @UltimateTrackerIsTracked3.canceled += instance.OnUltimateTrackerIsTracked3;
            @UltimateTrackerIsTracked4.started += instance.OnUltimateTrackerIsTracked4;
            @UltimateTrackerIsTracked4.performed += instance.OnUltimateTrackerIsTracked4;
            @UltimateTrackerIsTracked4.canceled += instance.OnUltimateTrackerIsTracked4;
            @UltimateTrackerTrackingState0.started += instance.OnUltimateTrackerTrackingState0;
            @UltimateTrackerTrackingState0.performed += instance.OnUltimateTrackerTrackingState0;
            @UltimateTrackerTrackingState0.canceled += instance.OnUltimateTrackerTrackingState0;
            @UltimateTrackerTrackingState1.started += instance.OnUltimateTrackerTrackingState1;
            @UltimateTrackerTrackingState1.performed += instance.OnUltimateTrackerTrackingState1;
            @UltimateTrackerTrackingState1.canceled += instance.OnUltimateTrackerTrackingState1;
            @UltimateTrackerTrackingState2.started += instance.OnUltimateTrackerTrackingState2;
            @UltimateTrackerTrackingState2.performed += instance.OnUltimateTrackerTrackingState2;
            @UltimateTrackerTrackingState2.canceled += instance.OnUltimateTrackerTrackingState2;
            @UltimateTrackerTrackingState3.started += instance.OnUltimateTrackerTrackingState3;
            @UltimateTrackerTrackingState3.performed += instance.OnUltimateTrackerTrackingState3;
            @UltimateTrackerTrackingState3.canceled += instance.OnUltimateTrackerTrackingState3;
            @UltimateTrackerTrackingState4.started += instance.OnUltimateTrackerTrackingState4;
            @UltimateTrackerTrackingState4.performed += instance.OnUltimateTrackerTrackingState4;
            @UltimateTrackerTrackingState4.canceled += instance.OnUltimateTrackerTrackingState4;
            @UltimateTrackerPosition0.started += instance.OnUltimateTrackerPosition0;
            @UltimateTrackerPosition0.performed += instance.OnUltimateTrackerPosition0;
            @UltimateTrackerPosition0.canceled += instance.OnUltimateTrackerPosition0;
            @UltimateTrackerPosition1.started += instance.OnUltimateTrackerPosition1;
            @UltimateTrackerPosition1.performed += instance.OnUltimateTrackerPosition1;
            @UltimateTrackerPosition1.canceled += instance.OnUltimateTrackerPosition1;
            @UltimateTrackerPosition2.started += instance.OnUltimateTrackerPosition2;
            @UltimateTrackerPosition2.performed += instance.OnUltimateTrackerPosition2;
            @UltimateTrackerPosition2.canceled += instance.OnUltimateTrackerPosition2;
            @UltimateTrackerPosition3.started += instance.OnUltimateTrackerPosition3;
            @UltimateTrackerPosition3.performed += instance.OnUltimateTrackerPosition3;
            @UltimateTrackerPosition3.canceled += instance.OnUltimateTrackerPosition3;
            @UltimateTrackerPosition4.started += instance.OnUltimateTrackerPosition4;
            @UltimateTrackerPosition4.performed += instance.OnUltimateTrackerPosition4;
            @UltimateTrackerPosition4.canceled += instance.OnUltimateTrackerPosition4;
            @UltimateTrackerRotation0.started += instance.OnUltimateTrackerRotation0;
            @UltimateTrackerRotation0.performed += instance.OnUltimateTrackerRotation0;
            @UltimateTrackerRotation0.canceled += instance.OnUltimateTrackerRotation0;
            @UltimateTrackerRotation1.started += instance.OnUltimateTrackerRotation1;
            @UltimateTrackerRotation1.performed += instance.OnUltimateTrackerRotation1;
            @UltimateTrackerRotation1.canceled += instance.OnUltimateTrackerRotation1;
            @UltimateTrackerRotation2.started += instance.OnUltimateTrackerRotation2;
            @UltimateTrackerRotation2.performed += instance.OnUltimateTrackerRotation2;
            @UltimateTrackerRotation2.canceled += instance.OnUltimateTrackerRotation2;
            @UltimateTrackerRotation3.started += instance.OnUltimateTrackerRotation3;
            @UltimateTrackerRotation3.performed += instance.OnUltimateTrackerRotation3;
            @UltimateTrackerRotation3.canceled += instance.OnUltimateTrackerRotation3;
            @UltimateTrackerRotation4.started += instance.OnUltimateTrackerRotation4;
            @UltimateTrackerRotation4.performed += instance.OnUltimateTrackerRotation4;
            @UltimateTrackerRotation4.canceled += instance.OnUltimateTrackerRotation4;
            @UltimateTrackerMenu0.started += instance.OnUltimateTrackerMenu0;
            @UltimateTrackerMenu0.performed += instance.OnUltimateTrackerMenu0;
            @UltimateTrackerMenu0.canceled += instance.OnUltimateTrackerMenu0;
            @UltimateTrackerMenu1.started += instance.OnUltimateTrackerMenu1;
            @UltimateTrackerMenu1.performed += instance.OnUltimateTrackerMenu1;
            @UltimateTrackerMenu1.canceled += instance.OnUltimateTrackerMenu1;
            @UltimateTrackerMenu2.started += instance.OnUltimateTrackerMenu2;
            @UltimateTrackerMenu2.performed += instance.OnUltimateTrackerMenu2;
            @UltimateTrackerMenu2.canceled += instance.OnUltimateTrackerMenu2;
            @UltimateTrackerMenu3.started += instance.OnUltimateTrackerMenu3;
            @UltimateTrackerMenu3.performed += instance.OnUltimateTrackerMenu3;
            @UltimateTrackerMenu3.canceled += instance.OnUltimateTrackerMenu3;
            @UltimateTrackerMenu4.started += instance.OnUltimateTrackerMenu4;
            @UltimateTrackerMenu4.performed += instance.OnUltimateTrackerMenu4;
            @UltimateTrackerMenu4.canceled += instance.OnUltimateTrackerMenu4;
            @UltimateTrackerGripPress0.started += instance.OnUltimateTrackerGripPress0;
            @UltimateTrackerGripPress0.performed += instance.OnUltimateTrackerGripPress0;
            @UltimateTrackerGripPress0.canceled += instance.OnUltimateTrackerGripPress0;
            @UltimateTrackerGripPress1.started += instance.OnUltimateTrackerGripPress1;
            @UltimateTrackerGripPress1.performed += instance.OnUltimateTrackerGripPress1;
            @UltimateTrackerGripPress1.canceled += instance.OnUltimateTrackerGripPress1;
            @UltimateTrackerGripPress2.started += instance.OnUltimateTrackerGripPress2;
            @UltimateTrackerGripPress2.performed += instance.OnUltimateTrackerGripPress2;
            @UltimateTrackerGripPress2.canceled += instance.OnUltimateTrackerGripPress2;
            @UltimateTrackerGripPress3.started += instance.OnUltimateTrackerGripPress3;
            @UltimateTrackerGripPress3.performed += instance.OnUltimateTrackerGripPress3;
            @UltimateTrackerGripPress3.canceled += instance.OnUltimateTrackerGripPress3;
            @UltimateTrackerGripPress4.started += instance.OnUltimateTrackerGripPress4;
            @UltimateTrackerGripPress4.performed += instance.OnUltimateTrackerGripPress4;
            @UltimateTrackerGripPress4.canceled += instance.OnUltimateTrackerGripPress4;
            @UltimateTrackerTriggerPress0.started += instance.OnUltimateTrackerTriggerPress0;
            @UltimateTrackerTriggerPress0.performed += instance.OnUltimateTrackerTriggerPress0;
            @UltimateTrackerTriggerPress0.canceled += instance.OnUltimateTrackerTriggerPress0;
            @UltimateTrackerTriggerPress1.started += instance.OnUltimateTrackerTriggerPress1;
            @UltimateTrackerTriggerPress1.performed += instance.OnUltimateTrackerTriggerPress1;
            @UltimateTrackerTriggerPress1.canceled += instance.OnUltimateTrackerTriggerPress1;
            @UltimateTrackerTriggerPress2.started += instance.OnUltimateTrackerTriggerPress2;
            @UltimateTrackerTriggerPress2.performed += instance.OnUltimateTrackerTriggerPress2;
            @UltimateTrackerTriggerPress2.canceled += instance.OnUltimateTrackerTriggerPress2;
            @UltimateTrackerTriggerPress3.started += instance.OnUltimateTrackerTriggerPress3;
            @UltimateTrackerTriggerPress3.performed += instance.OnUltimateTrackerTriggerPress3;
            @UltimateTrackerTriggerPress3.canceled += instance.OnUltimateTrackerTriggerPress3;
            @UltimateTrackerTriggerPress4.started += instance.OnUltimateTrackerTriggerPress4;
            @UltimateTrackerTriggerPress4.performed += instance.OnUltimateTrackerTriggerPress4;
            @UltimateTrackerTriggerPress4.canceled += instance.OnUltimateTrackerTriggerPress4;
            @UltimateTrackerTrackpadPress0.started += instance.OnUltimateTrackerTrackpadPress0;
            @UltimateTrackerTrackpadPress0.performed += instance.OnUltimateTrackerTrackpadPress0;
            @UltimateTrackerTrackpadPress0.canceled += instance.OnUltimateTrackerTrackpadPress0;
            @UltimateTrackerTrackpadPress1.started += instance.OnUltimateTrackerTrackpadPress1;
            @UltimateTrackerTrackpadPress1.performed += instance.OnUltimateTrackerTrackpadPress1;
            @UltimateTrackerTrackpadPress1.canceled += instance.OnUltimateTrackerTrackpadPress1;
            @UltimateTrackerTrackpadPress2.started += instance.OnUltimateTrackerTrackpadPress2;
            @UltimateTrackerTrackpadPress2.performed += instance.OnUltimateTrackerTrackpadPress2;
            @UltimateTrackerTrackpadPress2.canceled += instance.OnUltimateTrackerTrackpadPress2;
            @UltimateTrackerTrackpadPress3.started += instance.OnUltimateTrackerTrackpadPress3;
            @UltimateTrackerTrackpadPress3.performed += instance.OnUltimateTrackerTrackpadPress3;
            @UltimateTrackerTrackpadPress3.canceled += instance.OnUltimateTrackerTrackpadPress3;
            @UltimateTrackerTrackpadPress4.started += instance.OnUltimateTrackerTrackpadPress4;
            @UltimateTrackerTrackpadPress4.performed += instance.OnUltimateTrackerTrackpadPress4;
            @UltimateTrackerTrackpadPress4.canceled += instance.OnUltimateTrackerTrackpadPress4;
            @UltimateTrackerTrackpadTouch0.started += instance.OnUltimateTrackerTrackpadTouch0;
            @UltimateTrackerTrackpadTouch0.performed += instance.OnUltimateTrackerTrackpadTouch0;
            @UltimateTrackerTrackpadTouch0.canceled += instance.OnUltimateTrackerTrackpadTouch0;
            @UltimateTrackerTrackpadTouch1.started += instance.OnUltimateTrackerTrackpadTouch1;
            @UltimateTrackerTrackpadTouch1.performed += instance.OnUltimateTrackerTrackpadTouch1;
            @UltimateTrackerTrackpadTouch1.canceled += instance.OnUltimateTrackerTrackpadTouch1;
            @UltimateTrackerTrackpadTouch2.started += instance.OnUltimateTrackerTrackpadTouch2;
            @UltimateTrackerTrackpadTouch2.performed += instance.OnUltimateTrackerTrackpadTouch2;
            @UltimateTrackerTrackpadTouch2.canceled += instance.OnUltimateTrackerTrackpadTouch2;
            @UltimateTrackerTrackpadTouch3.started += instance.OnUltimateTrackerTrackpadTouch3;
            @UltimateTrackerTrackpadTouch3.performed += instance.OnUltimateTrackerTrackpadTouch3;
            @UltimateTrackerTrackpadTouch3.canceled += instance.OnUltimateTrackerTrackpadTouch3;
            @UltimateTrackerTrackpadTouch4.started += instance.OnUltimateTrackerTrackpadTouch4;
            @UltimateTrackerTrackpadTouch4.performed += instance.OnUltimateTrackerTrackpadTouch4;
            @UltimateTrackerTrackpadTouch4.canceled += instance.OnUltimateTrackerTrackpadTouch4;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="XRTrackerActions" />
        private void UnregisterCallbacks(IXRTrackerActions instance)
        {
            @UltimateTrackerIsTracked0.started -= instance.OnUltimateTrackerIsTracked0;
            @UltimateTrackerIsTracked0.performed -= instance.OnUltimateTrackerIsTracked0;
            @UltimateTrackerIsTracked0.canceled -= instance.OnUltimateTrackerIsTracked0;
            @UltimateTrackerIsTracked1.started -= instance.OnUltimateTrackerIsTracked1;
            @UltimateTrackerIsTracked1.performed -= instance.OnUltimateTrackerIsTracked1;
            @UltimateTrackerIsTracked1.canceled -= instance.OnUltimateTrackerIsTracked1;
            @UltimateTrackerIsTracked2.started -= instance.OnUltimateTrackerIsTracked2;
            @UltimateTrackerIsTracked2.performed -= instance.OnUltimateTrackerIsTracked2;
            @UltimateTrackerIsTracked2.canceled -= instance.OnUltimateTrackerIsTracked2;
            @UltimateTrackerIsTracked3.started -= instance.OnUltimateTrackerIsTracked3;
            @UltimateTrackerIsTracked3.performed -= instance.OnUltimateTrackerIsTracked3;
            @UltimateTrackerIsTracked3.canceled -= instance.OnUltimateTrackerIsTracked3;
            @UltimateTrackerIsTracked4.started -= instance.OnUltimateTrackerIsTracked4;
            @UltimateTrackerIsTracked4.performed -= instance.OnUltimateTrackerIsTracked4;
            @UltimateTrackerIsTracked4.canceled -= instance.OnUltimateTrackerIsTracked4;
            @UltimateTrackerTrackingState0.started -= instance.OnUltimateTrackerTrackingState0;
            @UltimateTrackerTrackingState0.performed -= instance.OnUltimateTrackerTrackingState0;
            @UltimateTrackerTrackingState0.canceled -= instance.OnUltimateTrackerTrackingState0;
            @UltimateTrackerTrackingState1.started -= instance.OnUltimateTrackerTrackingState1;
            @UltimateTrackerTrackingState1.performed -= instance.OnUltimateTrackerTrackingState1;
            @UltimateTrackerTrackingState1.canceled -= instance.OnUltimateTrackerTrackingState1;
            @UltimateTrackerTrackingState2.started -= instance.OnUltimateTrackerTrackingState2;
            @UltimateTrackerTrackingState2.performed -= instance.OnUltimateTrackerTrackingState2;
            @UltimateTrackerTrackingState2.canceled -= instance.OnUltimateTrackerTrackingState2;
            @UltimateTrackerTrackingState3.started -= instance.OnUltimateTrackerTrackingState3;
            @UltimateTrackerTrackingState3.performed -= instance.OnUltimateTrackerTrackingState3;
            @UltimateTrackerTrackingState3.canceled -= instance.OnUltimateTrackerTrackingState3;
            @UltimateTrackerTrackingState4.started -= instance.OnUltimateTrackerTrackingState4;
            @UltimateTrackerTrackingState4.performed -= instance.OnUltimateTrackerTrackingState4;
            @UltimateTrackerTrackingState4.canceled -= instance.OnUltimateTrackerTrackingState4;
            @UltimateTrackerPosition0.started -= instance.OnUltimateTrackerPosition0;
            @UltimateTrackerPosition0.performed -= instance.OnUltimateTrackerPosition0;
            @UltimateTrackerPosition0.canceled -= instance.OnUltimateTrackerPosition0;
            @UltimateTrackerPosition1.started -= instance.OnUltimateTrackerPosition1;
            @UltimateTrackerPosition1.performed -= instance.OnUltimateTrackerPosition1;
            @UltimateTrackerPosition1.canceled -= instance.OnUltimateTrackerPosition1;
            @UltimateTrackerPosition2.started -= instance.OnUltimateTrackerPosition2;
            @UltimateTrackerPosition2.performed -= instance.OnUltimateTrackerPosition2;
            @UltimateTrackerPosition2.canceled -= instance.OnUltimateTrackerPosition2;
            @UltimateTrackerPosition3.started -= instance.OnUltimateTrackerPosition3;
            @UltimateTrackerPosition3.performed -= instance.OnUltimateTrackerPosition3;
            @UltimateTrackerPosition3.canceled -= instance.OnUltimateTrackerPosition3;
            @UltimateTrackerPosition4.started -= instance.OnUltimateTrackerPosition4;
            @UltimateTrackerPosition4.performed -= instance.OnUltimateTrackerPosition4;
            @UltimateTrackerPosition4.canceled -= instance.OnUltimateTrackerPosition4;
            @UltimateTrackerRotation0.started -= instance.OnUltimateTrackerRotation0;
            @UltimateTrackerRotation0.performed -= instance.OnUltimateTrackerRotation0;
            @UltimateTrackerRotation0.canceled -= instance.OnUltimateTrackerRotation0;
            @UltimateTrackerRotation1.started -= instance.OnUltimateTrackerRotation1;
            @UltimateTrackerRotation1.performed -= instance.OnUltimateTrackerRotation1;
            @UltimateTrackerRotation1.canceled -= instance.OnUltimateTrackerRotation1;
            @UltimateTrackerRotation2.started -= instance.OnUltimateTrackerRotation2;
            @UltimateTrackerRotation2.performed -= instance.OnUltimateTrackerRotation2;
            @UltimateTrackerRotation2.canceled -= instance.OnUltimateTrackerRotation2;
            @UltimateTrackerRotation3.started -= instance.OnUltimateTrackerRotation3;
            @UltimateTrackerRotation3.performed -= instance.OnUltimateTrackerRotation3;
            @UltimateTrackerRotation3.canceled -= instance.OnUltimateTrackerRotation3;
            @UltimateTrackerRotation4.started -= instance.OnUltimateTrackerRotation4;
            @UltimateTrackerRotation4.performed -= instance.OnUltimateTrackerRotation4;
            @UltimateTrackerRotation4.canceled -= instance.OnUltimateTrackerRotation4;
            @UltimateTrackerMenu0.started -= instance.OnUltimateTrackerMenu0;
            @UltimateTrackerMenu0.performed -= instance.OnUltimateTrackerMenu0;
            @UltimateTrackerMenu0.canceled -= instance.OnUltimateTrackerMenu0;
            @UltimateTrackerMenu1.started -= instance.OnUltimateTrackerMenu1;
            @UltimateTrackerMenu1.performed -= instance.OnUltimateTrackerMenu1;
            @UltimateTrackerMenu1.canceled -= instance.OnUltimateTrackerMenu1;
            @UltimateTrackerMenu2.started -= instance.OnUltimateTrackerMenu2;
            @UltimateTrackerMenu2.performed -= instance.OnUltimateTrackerMenu2;
            @UltimateTrackerMenu2.canceled -= instance.OnUltimateTrackerMenu2;
            @UltimateTrackerMenu3.started -= instance.OnUltimateTrackerMenu3;
            @UltimateTrackerMenu3.performed -= instance.OnUltimateTrackerMenu3;
            @UltimateTrackerMenu3.canceled -= instance.OnUltimateTrackerMenu3;
            @UltimateTrackerMenu4.started -= instance.OnUltimateTrackerMenu4;
            @UltimateTrackerMenu4.performed -= instance.OnUltimateTrackerMenu4;
            @UltimateTrackerMenu4.canceled -= instance.OnUltimateTrackerMenu4;
            @UltimateTrackerGripPress0.started -= instance.OnUltimateTrackerGripPress0;
            @UltimateTrackerGripPress0.performed -= instance.OnUltimateTrackerGripPress0;
            @UltimateTrackerGripPress0.canceled -= instance.OnUltimateTrackerGripPress0;
            @UltimateTrackerGripPress1.started -= instance.OnUltimateTrackerGripPress1;
            @UltimateTrackerGripPress1.performed -= instance.OnUltimateTrackerGripPress1;
            @UltimateTrackerGripPress1.canceled -= instance.OnUltimateTrackerGripPress1;
            @UltimateTrackerGripPress2.started -= instance.OnUltimateTrackerGripPress2;
            @UltimateTrackerGripPress2.performed -= instance.OnUltimateTrackerGripPress2;
            @UltimateTrackerGripPress2.canceled -= instance.OnUltimateTrackerGripPress2;
            @UltimateTrackerGripPress3.started -= instance.OnUltimateTrackerGripPress3;
            @UltimateTrackerGripPress3.performed -= instance.OnUltimateTrackerGripPress3;
            @UltimateTrackerGripPress3.canceled -= instance.OnUltimateTrackerGripPress3;
            @UltimateTrackerGripPress4.started -= instance.OnUltimateTrackerGripPress4;
            @UltimateTrackerGripPress4.performed -= instance.OnUltimateTrackerGripPress4;
            @UltimateTrackerGripPress4.canceled -= instance.OnUltimateTrackerGripPress4;
            @UltimateTrackerTriggerPress0.started -= instance.OnUltimateTrackerTriggerPress0;
            @UltimateTrackerTriggerPress0.performed -= instance.OnUltimateTrackerTriggerPress0;
            @UltimateTrackerTriggerPress0.canceled -= instance.OnUltimateTrackerTriggerPress0;
            @UltimateTrackerTriggerPress1.started -= instance.OnUltimateTrackerTriggerPress1;
            @UltimateTrackerTriggerPress1.performed -= instance.OnUltimateTrackerTriggerPress1;
            @UltimateTrackerTriggerPress1.canceled -= instance.OnUltimateTrackerTriggerPress1;
            @UltimateTrackerTriggerPress2.started -= instance.OnUltimateTrackerTriggerPress2;
            @UltimateTrackerTriggerPress2.performed -= instance.OnUltimateTrackerTriggerPress2;
            @UltimateTrackerTriggerPress2.canceled -= instance.OnUltimateTrackerTriggerPress2;
            @UltimateTrackerTriggerPress3.started -= instance.OnUltimateTrackerTriggerPress3;
            @UltimateTrackerTriggerPress3.performed -= instance.OnUltimateTrackerTriggerPress3;
            @UltimateTrackerTriggerPress3.canceled -= instance.OnUltimateTrackerTriggerPress3;
            @UltimateTrackerTriggerPress4.started -= instance.OnUltimateTrackerTriggerPress4;
            @UltimateTrackerTriggerPress4.performed -= instance.OnUltimateTrackerTriggerPress4;
            @UltimateTrackerTriggerPress4.canceled -= instance.OnUltimateTrackerTriggerPress4;
            @UltimateTrackerTrackpadPress0.started -= instance.OnUltimateTrackerTrackpadPress0;
            @UltimateTrackerTrackpadPress0.performed -= instance.OnUltimateTrackerTrackpadPress0;
            @UltimateTrackerTrackpadPress0.canceled -= instance.OnUltimateTrackerTrackpadPress0;
            @UltimateTrackerTrackpadPress1.started -= instance.OnUltimateTrackerTrackpadPress1;
            @UltimateTrackerTrackpadPress1.performed -= instance.OnUltimateTrackerTrackpadPress1;
            @UltimateTrackerTrackpadPress1.canceled -= instance.OnUltimateTrackerTrackpadPress1;
            @UltimateTrackerTrackpadPress2.started -= instance.OnUltimateTrackerTrackpadPress2;
            @UltimateTrackerTrackpadPress2.performed -= instance.OnUltimateTrackerTrackpadPress2;
            @UltimateTrackerTrackpadPress2.canceled -= instance.OnUltimateTrackerTrackpadPress2;
            @UltimateTrackerTrackpadPress3.started -= instance.OnUltimateTrackerTrackpadPress3;
            @UltimateTrackerTrackpadPress3.performed -= instance.OnUltimateTrackerTrackpadPress3;
            @UltimateTrackerTrackpadPress3.canceled -= instance.OnUltimateTrackerTrackpadPress3;
            @UltimateTrackerTrackpadPress4.started -= instance.OnUltimateTrackerTrackpadPress4;
            @UltimateTrackerTrackpadPress4.performed -= instance.OnUltimateTrackerTrackpadPress4;
            @UltimateTrackerTrackpadPress4.canceled -= instance.OnUltimateTrackerTrackpadPress4;
            @UltimateTrackerTrackpadTouch0.started -= instance.OnUltimateTrackerTrackpadTouch0;
            @UltimateTrackerTrackpadTouch0.performed -= instance.OnUltimateTrackerTrackpadTouch0;
            @UltimateTrackerTrackpadTouch0.canceled -= instance.OnUltimateTrackerTrackpadTouch0;
            @UltimateTrackerTrackpadTouch1.started -= instance.OnUltimateTrackerTrackpadTouch1;
            @UltimateTrackerTrackpadTouch1.performed -= instance.OnUltimateTrackerTrackpadTouch1;
            @UltimateTrackerTrackpadTouch1.canceled -= instance.OnUltimateTrackerTrackpadTouch1;
            @UltimateTrackerTrackpadTouch2.started -= instance.OnUltimateTrackerTrackpadTouch2;
            @UltimateTrackerTrackpadTouch2.performed -= instance.OnUltimateTrackerTrackpadTouch2;
            @UltimateTrackerTrackpadTouch2.canceled -= instance.OnUltimateTrackerTrackpadTouch2;
            @UltimateTrackerTrackpadTouch3.started -= instance.OnUltimateTrackerTrackpadTouch3;
            @UltimateTrackerTrackpadTouch3.performed -= instance.OnUltimateTrackerTrackpadTouch3;
            @UltimateTrackerTrackpadTouch3.canceled -= instance.OnUltimateTrackerTrackpadTouch3;
            @UltimateTrackerTrackpadTouch4.started -= instance.OnUltimateTrackerTrackpadTouch4;
            @UltimateTrackerTrackpadTouch4.performed -= instance.OnUltimateTrackerTrackpadTouch4;
            @UltimateTrackerTrackpadTouch4.canceled -= instance.OnUltimateTrackerTrackpadTouch4;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="XRTrackerActions.UnregisterCallbacks(IXRTrackerActions)" />.
        /// </summary>
        /// <seealso cref="XRTrackerActions.UnregisterCallbacks(IXRTrackerActions)" />
        public void RemoveCallbacks(IXRTrackerActions instance)
        {
            if (m_Wrapper.m_XRTrackerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="XRTrackerActions.AddCallbacks(IXRTrackerActions)" />
        /// <seealso cref="XRTrackerActions.RemoveCallbacks(IXRTrackerActions)" />
        /// <seealso cref="XRTrackerActions.UnregisterCallbacks(IXRTrackerActions)" />
        public void SetCallbacks(IXRTrackerActions instance)
        {
            foreach (var item in m_Wrapper.m_XRTrackerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRTrackerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="XRTrackerActions" /> instance referencing this action map.
    /// </summary>
    public XRTrackerActions @XRTracker => new XRTrackerActions(this);

    // ViveTracker
    private readonly InputActionMap m_ViveTracker;
    private List<IViveTrackerActions> m_ViveTrackerActionsCallbackInterfaces = new List<IViveTrackerActions>();
    private readonly InputAction m_ViveTracker_LeftFootPosition;
    private readonly InputAction m_ViveTracker_LeftFootRotation;
    private readonly InputAction m_ViveTracker_RightFootPosition;
    private readonly InputAction m_ViveTracker_RightFootRotation;
    private readonly InputAction m_ViveTracker_LeftShoulderPosition;
    private readonly InputAction m_ViveTracker_LeftShoulderRotation;
    private readonly InputAction m_ViveTracker_RightShoulderPosition;
    private readonly InputAction m_ViveTracker_RightShoulderRotation;
    private readonly InputAction m_ViveTracker_LeftElbowPosition;
    private readonly InputAction m_ViveTracker_LeftElbowRotation;
    private readonly InputAction m_ViveTracker_RightElbowPosition;
    private readonly InputAction m_ViveTracker_RightElbowRotation;
    private readonly InputAction m_ViveTracker_LeftKneePosition;
    private readonly InputAction m_ViveTracker_LeftKneeRotation;
    private readonly InputAction m_ViveTracker_RightKneePosition;
    private readonly InputAction m_ViveTracker_RightKneeRotation;
    private readonly InputAction m_ViveTracker_WaistPosition;
    private readonly InputAction m_ViveTracker_WaistRotation;
    private readonly InputAction m_ViveTracker_ChestPosition;
    private readonly InputAction m_ViveTracker_ChestRotation;
    private readonly InputAction m_ViveTracker_CameraPosition;
    private readonly InputAction m_ViveTracker_CameraRotation;
    private readonly InputAction m_ViveTracker_KeyboardPosition;
    private readonly InputAction m_ViveTracker_KeyboardRotation;
    /// <summary>
    /// Provides access to input actions defined in input action map "ViveTracker".
    /// </summary>
    public struct ViveTrackerActions
    {
        private @InputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public ViveTrackerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/LeftFootPosition".
        /// </summary>
        public InputAction @LeftFootPosition => m_Wrapper.m_ViveTracker_LeftFootPosition;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/LeftFootRotation".
        /// </summary>
        public InputAction @LeftFootRotation => m_Wrapper.m_ViveTracker_LeftFootRotation;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/RightFootPosition".
        /// </summary>
        public InputAction @RightFootPosition => m_Wrapper.m_ViveTracker_RightFootPosition;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/RightFootRotation".
        /// </summary>
        public InputAction @RightFootRotation => m_Wrapper.m_ViveTracker_RightFootRotation;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/LeftShoulderPosition".
        /// </summary>
        public InputAction @LeftShoulderPosition => m_Wrapper.m_ViveTracker_LeftShoulderPosition;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/LeftShoulderRotation".
        /// </summary>
        public InputAction @LeftShoulderRotation => m_Wrapper.m_ViveTracker_LeftShoulderRotation;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/RightShoulderPosition".
        /// </summary>
        public InputAction @RightShoulderPosition => m_Wrapper.m_ViveTracker_RightShoulderPosition;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/RightShoulderRotation".
        /// </summary>
        public InputAction @RightShoulderRotation => m_Wrapper.m_ViveTracker_RightShoulderRotation;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/LeftElbowPosition".
        /// </summary>
        public InputAction @LeftElbowPosition => m_Wrapper.m_ViveTracker_LeftElbowPosition;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/LeftElbowRotation".
        /// </summary>
        public InputAction @LeftElbowRotation => m_Wrapper.m_ViveTracker_LeftElbowRotation;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/RightElbowPosition".
        /// </summary>
        public InputAction @RightElbowPosition => m_Wrapper.m_ViveTracker_RightElbowPosition;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/RightElbowRotation".
        /// </summary>
        public InputAction @RightElbowRotation => m_Wrapper.m_ViveTracker_RightElbowRotation;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/LeftKneePosition".
        /// </summary>
        public InputAction @LeftKneePosition => m_Wrapper.m_ViveTracker_LeftKneePosition;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/LeftKneeRotation".
        /// </summary>
        public InputAction @LeftKneeRotation => m_Wrapper.m_ViveTracker_LeftKneeRotation;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/RightKneePosition".
        /// </summary>
        public InputAction @RightKneePosition => m_Wrapper.m_ViveTracker_RightKneePosition;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/RightKneeRotation".
        /// </summary>
        public InputAction @RightKneeRotation => m_Wrapper.m_ViveTracker_RightKneeRotation;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/WaistPosition".
        /// </summary>
        public InputAction @WaistPosition => m_Wrapper.m_ViveTracker_WaistPosition;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/WaistRotation".
        /// </summary>
        public InputAction @WaistRotation => m_Wrapper.m_ViveTracker_WaistRotation;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/ChestPosition".
        /// </summary>
        public InputAction @ChestPosition => m_Wrapper.m_ViveTracker_ChestPosition;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/ChestRotation".
        /// </summary>
        public InputAction @ChestRotation => m_Wrapper.m_ViveTracker_ChestRotation;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/CameraPosition".
        /// </summary>
        public InputAction @CameraPosition => m_Wrapper.m_ViveTracker_CameraPosition;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/CameraRotation".
        /// </summary>
        public InputAction @CameraRotation => m_Wrapper.m_ViveTracker_CameraRotation;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/KeyboardPosition".
        /// </summary>
        public InputAction @KeyboardPosition => m_Wrapper.m_ViveTracker_KeyboardPosition;
        /// <summary>
        /// Provides access to the underlying input action "ViveTracker/KeyboardRotation".
        /// </summary>
        public InputAction @KeyboardRotation => m_Wrapper.m_ViveTracker_KeyboardRotation;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_ViveTracker; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="ViveTrackerActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(ViveTrackerActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="ViveTrackerActions" />
        public void AddCallbacks(IViveTrackerActions instance)
        {
            if (instance == null || m_Wrapper.m_ViveTrackerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ViveTrackerActionsCallbackInterfaces.Add(instance);
            @LeftFootPosition.started += instance.OnLeftFootPosition;
            @LeftFootPosition.performed += instance.OnLeftFootPosition;
            @LeftFootPosition.canceled += instance.OnLeftFootPosition;
            @LeftFootRotation.started += instance.OnLeftFootRotation;
            @LeftFootRotation.performed += instance.OnLeftFootRotation;
            @LeftFootRotation.canceled += instance.OnLeftFootRotation;
            @RightFootPosition.started += instance.OnRightFootPosition;
            @RightFootPosition.performed += instance.OnRightFootPosition;
            @RightFootPosition.canceled += instance.OnRightFootPosition;
            @RightFootRotation.started += instance.OnRightFootRotation;
            @RightFootRotation.performed += instance.OnRightFootRotation;
            @RightFootRotation.canceled += instance.OnRightFootRotation;
            @LeftShoulderPosition.started += instance.OnLeftShoulderPosition;
            @LeftShoulderPosition.performed += instance.OnLeftShoulderPosition;
            @LeftShoulderPosition.canceled += instance.OnLeftShoulderPosition;
            @LeftShoulderRotation.started += instance.OnLeftShoulderRotation;
            @LeftShoulderRotation.performed += instance.OnLeftShoulderRotation;
            @LeftShoulderRotation.canceled += instance.OnLeftShoulderRotation;
            @RightShoulderPosition.started += instance.OnRightShoulderPosition;
            @RightShoulderPosition.performed += instance.OnRightShoulderPosition;
            @RightShoulderPosition.canceled += instance.OnRightShoulderPosition;
            @RightShoulderRotation.started += instance.OnRightShoulderRotation;
            @RightShoulderRotation.performed += instance.OnRightShoulderRotation;
            @RightShoulderRotation.canceled += instance.OnRightShoulderRotation;
            @LeftElbowPosition.started += instance.OnLeftElbowPosition;
            @LeftElbowPosition.performed += instance.OnLeftElbowPosition;
            @LeftElbowPosition.canceled += instance.OnLeftElbowPosition;
            @LeftElbowRotation.started += instance.OnLeftElbowRotation;
            @LeftElbowRotation.performed += instance.OnLeftElbowRotation;
            @LeftElbowRotation.canceled += instance.OnLeftElbowRotation;
            @RightElbowPosition.started += instance.OnRightElbowPosition;
            @RightElbowPosition.performed += instance.OnRightElbowPosition;
            @RightElbowPosition.canceled += instance.OnRightElbowPosition;
            @RightElbowRotation.started += instance.OnRightElbowRotation;
            @RightElbowRotation.performed += instance.OnRightElbowRotation;
            @RightElbowRotation.canceled += instance.OnRightElbowRotation;
            @LeftKneePosition.started += instance.OnLeftKneePosition;
            @LeftKneePosition.performed += instance.OnLeftKneePosition;
            @LeftKneePosition.canceled += instance.OnLeftKneePosition;
            @LeftKneeRotation.started += instance.OnLeftKneeRotation;
            @LeftKneeRotation.performed += instance.OnLeftKneeRotation;
            @LeftKneeRotation.canceled += instance.OnLeftKneeRotation;
            @RightKneePosition.started += instance.OnRightKneePosition;
            @RightKneePosition.performed += instance.OnRightKneePosition;
            @RightKneePosition.canceled += instance.OnRightKneePosition;
            @RightKneeRotation.started += instance.OnRightKneeRotation;
            @RightKneeRotation.performed += instance.OnRightKneeRotation;
            @RightKneeRotation.canceled += instance.OnRightKneeRotation;
            @WaistPosition.started += instance.OnWaistPosition;
            @WaistPosition.performed += instance.OnWaistPosition;
            @WaistPosition.canceled += instance.OnWaistPosition;
            @WaistRotation.started += instance.OnWaistRotation;
            @WaistRotation.performed += instance.OnWaistRotation;
            @WaistRotation.canceled += instance.OnWaistRotation;
            @ChestPosition.started += instance.OnChestPosition;
            @ChestPosition.performed += instance.OnChestPosition;
            @ChestPosition.canceled += instance.OnChestPosition;
            @ChestRotation.started += instance.OnChestRotation;
            @ChestRotation.performed += instance.OnChestRotation;
            @ChestRotation.canceled += instance.OnChestRotation;
            @CameraPosition.started += instance.OnCameraPosition;
            @CameraPosition.performed += instance.OnCameraPosition;
            @CameraPosition.canceled += instance.OnCameraPosition;
            @CameraRotation.started += instance.OnCameraRotation;
            @CameraRotation.performed += instance.OnCameraRotation;
            @CameraRotation.canceled += instance.OnCameraRotation;
            @KeyboardPosition.started += instance.OnKeyboardPosition;
            @KeyboardPosition.performed += instance.OnKeyboardPosition;
            @KeyboardPosition.canceled += instance.OnKeyboardPosition;
            @KeyboardRotation.started += instance.OnKeyboardRotation;
            @KeyboardRotation.performed += instance.OnKeyboardRotation;
            @KeyboardRotation.canceled += instance.OnKeyboardRotation;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="ViveTrackerActions" />
        private void UnregisterCallbacks(IViveTrackerActions instance)
        {
            @LeftFootPosition.started -= instance.OnLeftFootPosition;
            @LeftFootPosition.performed -= instance.OnLeftFootPosition;
            @LeftFootPosition.canceled -= instance.OnLeftFootPosition;
            @LeftFootRotation.started -= instance.OnLeftFootRotation;
            @LeftFootRotation.performed -= instance.OnLeftFootRotation;
            @LeftFootRotation.canceled -= instance.OnLeftFootRotation;
            @RightFootPosition.started -= instance.OnRightFootPosition;
            @RightFootPosition.performed -= instance.OnRightFootPosition;
            @RightFootPosition.canceled -= instance.OnRightFootPosition;
            @RightFootRotation.started -= instance.OnRightFootRotation;
            @RightFootRotation.performed -= instance.OnRightFootRotation;
            @RightFootRotation.canceled -= instance.OnRightFootRotation;
            @LeftShoulderPosition.started -= instance.OnLeftShoulderPosition;
            @LeftShoulderPosition.performed -= instance.OnLeftShoulderPosition;
            @LeftShoulderPosition.canceled -= instance.OnLeftShoulderPosition;
            @LeftShoulderRotation.started -= instance.OnLeftShoulderRotation;
            @LeftShoulderRotation.performed -= instance.OnLeftShoulderRotation;
            @LeftShoulderRotation.canceled -= instance.OnLeftShoulderRotation;
            @RightShoulderPosition.started -= instance.OnRightShoulderPosition;
            @RightShoulderPosition.performed -= instance.OnRightShoulderPosition;
            @RightShoulderPosition.canceled -= instance.OnRightShoulderPosition;
            @RightShoulderRotation.started -= instance.OnRightShoulderRotation;
            @RightShoulderRotation.performed -= instance.OnRightShoulderRotation;
            @RightShoulderRotation.canceled -= instance.OnRightShoulderRotation;
            @LeftElbowPosition.started -= instance.OnLeftElbowPosition;
            @LeftElbowPosition.performed -= instance.OnLeftElbowPosition;
            @LeftElbowPosition.canceled -= instance.OnLeftElbowPosition;
            @LeftElbowRotation.started -= instance.OnLeftElbowRotation;
            @LeftElbowRotation.performed -= instance.OnLeftElbowRotation;
            @LeftElbowRotation.canceled -= instance.OnLeftElbowRotation;
            @RightElbowPosition.started -= instance.OnRightElbowPosition;
            @RightElbowPosition.performed -= instance.OnRightElbowPosition;
            @RightElbowPosition.canceled -= instance.OnRightElbowPosition;
            @RightElbowRotation.started -= instance.OnRightElbowRotation;
            @RightElbowRotation.performed -= instance.OnRightElbowRotation;
            @RightElbowRotation.canceled -= instance.OnRightElbowRotation;
            @LeftKneePosition.started -= instance.OnLeftKneePosition;
            @LeftKneePosition.performed -= instance.OnLeftKneePosition;
            @LeftKneePosition.canceled -= instance.OnLeftKneePosition;
            @LeftKneeRotation.started -= instance.OnLeftKneeRotation;
            @LeftKneeRotation.performed -= instance.OnLeftKneeRotation;
            @LeftKneeRotation.canceled -= instance.OnLeftKneeRotation;
            @RightKneePosition.started -= instance.OnRightKneePosition;
            @RightKneePosition.performed -= instance.OnRightKneePosition;
            @RightKneePosition.canceled -= instance.OnRightKneePosition;
            @RightKneeRotation.started -= instance.OnRightKneeRotation;
            @RightKneeRotation.performed -= instance.OnRightKneeRotation;
            @RightKneeRotation.canceled -= instance.OnRightKneeRotation;
            @WaistPosition.started -= instance.OnWaistPosition;
            @WaistPosition.performed -= instance.OnWaistPosition;
            @WaistPosition.canceled -= instance.OnWaistPosition;
            @WaistRotation.started -= instance.OnWaistRotation;
            @WaistRotation.performed -= instance.OnWaistRotation;
            @WaistRotation.canceled -= instance.OnWaistRotation;
            @ChestPosition.started -= instance.OnChestPosition;
            @ChestPosition.performed -= instance.OnChestPosition;
            @ChestPosition.canceled -= instance.OnChestPosition;
            @ChestRotation.started -= instance.OnChestRotation;
            @ChestRotation.performed -= instance.OnChestRotation;
            @ChestRotation.canceled -= instance.OnChestRotation;
            @CameraPosition.started -= instance.OnCameraPosition;
            @CameraPosition.performed -= instance.OnCameraPosition;
            @CameraPosition.canceled -= instance.OnCameraPosition;
            @CameraRotation.started -= instance.OnCameraRotation;
            @CameraRotation.performed -= instance.OnCameraRotation;
            @CameraRotation.canceled -= instance.OnCameraRotation;
            @KeyboardPosition.started -= instance.OnKeyboardPosition;
            @KeyboardPosition.performed -= instance.OnKeyboardPosition;
            @KeyboardPosition.canceled -= instance.OnKeyboardPosition;
            @KeyboardRotation.started -= instance.OnKeyboardRotation;
            @KeyboardRotation.performed -= instance.OnKeyboardRotation;
            @KeyboardRotation.canceled -= instance.OnKeyboardRotation;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="ViveTrackerActions.UnregisterCallbacks(IViveTrackerActions)" />.
        /// </summary>
        /// <seealso cref="ViveTrackerActions.UnregisterCallbacks(IViveTrackerActions)" />
        public void RemoveCallbacks(IViveTrackerActions instance)
        {
            if (m_Wrapper.m_ViveTrackerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="ViveTrackerActions.AddCallbacks(IViveTrackerActions)" />
        /// <seealso cref="ViveTrackerActions.RemoveCallbacks(IViveTrackerActions)" />
        /// <seealso cref="ViveTrackerActions.UnregisterCallbacks(IViveTrackerActions)" />
        public void SetCallbacks(IViveTrackerActions instance)
        {
            foreach (var item in m_Wrapper.m_ViveTrackerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ViveTrackerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="ViveTrackerActions" /> instance referencing this action map.
    /// </summary>
    public ViveTrackerActions @ViveTracker => new ViveTrackerActions(this);
    private int m_XRUsageSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme XRUsageScheme
    {
        get
        {
            if (m_XRUsageSchemeIndex == -1) m_XRUsageSchemeIndex = asset.FindControlSchemeIndex("XR Usage");
            return asset.controlSchemes[m_XRUsageSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "LeftHand" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="LeftHandActions.AddCallbacks(ILeftHandActions)" />
    /// <seealso cref="LeftHandActions.RemoveCallbacks(ILeftHandActions)" />
    public interface ILeftHandActions
    {
        /// <summary>
        /// Method invoked when associated input action "TriggerPress" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTriggerPress(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TriggerTouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTriggerTouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Trigger" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTrigger(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PrimaryButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrimaryButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PrimaryTouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrimaryTouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Menu" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMenu(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Primary2DAxis" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrimary2DAxis(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Primary2DAxisClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrimary2DAxisClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Primary2DAxisTouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrimary2DAxisTouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Secondary2DAxis" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondary2DAxis(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Secondary2DAxisClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondary2DAxisClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Secondary2DAxisTouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondary2DAxisTouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Grip" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGrip(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GripPress" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGripPress(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SecondaryButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondaryButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SecondaryTouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondaryTouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PointerPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPointerPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PointerRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPointerRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GripPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGripPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GripRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGripRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Haptic" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHaptic(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PokePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPokePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PokeRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPokeRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PinchPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPinchPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PinchRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPinchRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PinchValue" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPinchValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PinchReady" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPinchReady(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PointerActivate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPointerActivate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PointerActivateReady" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPointerActivateReady(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GraspValue" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGraspValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GraspReady" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGraspReady(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PalmPosePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPalmPosePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PalmPoseRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPalmPoseRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PinchPose" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPinchPose(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PokePose" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPokePose(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PalmPose" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPalmPose(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GripPose" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGripPose(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "AimPose" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAimPose(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "IsTracked" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnIsTracked(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TrackingState" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTrackingState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GripTouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGripTouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ThumbrestTouched" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnThumbrestTouched(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "RightHand" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="RightHandActions.AddCallbacks(IRightHandActions)" />
    /// <seealso cref="RightHandActions.RemoveCallbacks(IRightHandActions)" />
    public interface IRightHandActions
    {
        /// <summary>
        /// Method invoked when associated input action "TriggerPress" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTriggerPress(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TriggerTouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTriggerTouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Trigger" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTrigger(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PrimaryButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrimaryButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PrimaryTouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrimaryTouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Menu" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMenu(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Primary2DAxis" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrimary2DAxis(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Primary2DAxisClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrimary2DAxisClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Primary2DAxisTouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrimary2DAxisTouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Secondary2DAxis" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondary2DAxis(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Secondary2DAxisClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondary2DAxisClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Secondary2DAxisTouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondary2DAxisTouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Grip" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGrip(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GripPress" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGripPress(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SecondaryButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondaryButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SecondaryTouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondaryTouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PointerPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPointerPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PointerRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPointerRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GripPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGripPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GripRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGripRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Haptic" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHaptic(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PokePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPokePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PokeRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPokeRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PinchPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPinchPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PinchRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPinchRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PinchValue" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPinchValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PinchReady" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPinchReady(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PointerActivate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPointerActivate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PointerActivateReady" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPointerActivateReady(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GraspValue" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGraspValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GraspReady" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGraspReady(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PalmPosePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPalmPosePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PalmPoseRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPalmPoseRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PinchPose" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPinchPose(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PokePose" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPokePose(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PalmPose" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPalmPose(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GripPose" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGripPose(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "AimPose" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAimPose(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "IsTracked" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnIsTracked(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TrackingState" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTrackingState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GripTouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGripTouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ThumbrestTouched" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnThumbrestTouched(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "HMD" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="HMDActions.AddCallbacks(IHMDActions)" />
    /// <seealso cref="HMDActions.RemoveCallbacks(IHMDActions)" />
    public interface IHMDActions
    {
        /// <summary>
        /// Method invoked when associated input action "hmdPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHmdPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "hmdRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHmdRotation(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "UI" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="UIActions.AddCallbacks(IUIActions)" />
    /// <seealso cref="UIActions.RemoveCallbacks(IUIActions)" />
    public interface IUIActions
    {
        /// <summary>
        /// Method invoked when associated input action "Click" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "pointerPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPointerPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "pointerRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPointerRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Down" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDown(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "EyeGaze" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="EyeGazeActions.AddCallbacks(IEyeGazeActions)" />
    /// <seealso cref="EyeGazeActions.RemoveCallbacks(IEyeGazeActions)" />
    public interface IEyeGazeActions
    {
        /// <summary>
        /// Method invoked when associated input action "Tracked" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTracked(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "EyePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnEyePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "EyeRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnEyeRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "EyePose" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnEyePose(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "LeftHandInteraction" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="LeftHandInteractionActions.AddCallbacks(ILeftHandInteractionActions)" />
    /// <seealso cref="LeftHandInteractionActions.RemoveCallbacks(ILeftHandInteractionActions)" />
    public interface ILeftHandInteractionActions
    {
        /// <summary>
        /// Method invoked when associated input action "GripValue" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGripValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SelectValue" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "IsTracked" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnIsTracked(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TrackingState" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTrackingState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "DevicePose" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDevicePose(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "DevicePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDevicePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "DeviceRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDeviceRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pointer" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPointer(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "RightHandInteraction" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="RightHandInteractionActions.AddCallbacks(IRightHandInteractionActions)" />
    /// <seealso cref="RightHandInteractionActions.RemoveCallbacks(IRightHandInteractionActions)" />
    public interface IRightHandInteractionActions
    {
        /// <summary>
        /// Method invoked when associated input action "GripValue" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGripValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SelectValue" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "IsTracked" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnIsTracked(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TrackingState" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTrackingState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "DevicePose" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDevicePose(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "DevicePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDevicePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "DeviceRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDeviceRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pointer" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPointer(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "LeftWristTracker" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="LeftWristTrackerActions.AddCallbacks(ILeftWristTrackerActions)" />
    /// <seealso cref="LeftWristTrackerActions.RemoveCallbacks(ILeftWristTrackerActions)" />
    public interface ILeftWristTrackerActions
    {
        /// <summary>
        /// Method invoked when associated input action "IsTracked" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnIsTracked(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TrackingState" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTrackingState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "DevicePose" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDevicePose(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "DevicePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDevicePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "DeviceRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDeviceRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PrimaryButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrimaryButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Menu" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMenu(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "RightWristTracker" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="RightWristTrackerActions.AddCallbacks(IRightWristTrackerActions)" />
    /// <seealso cref="RightWristTrackerActions.RemoveCallbacks(IRightWristTrackerActions)" />
    public interface IRightWristTrackerActions
    {
        /// <summary>
        /// Method invoked when associated input action "IsTracked" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnIsTracked(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TrackingState" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTrackingState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "DevicePose" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDevicePose(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "DevicePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDevicePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "DeviceRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDeviceRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PrimaryButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrimaryButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Menu" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMenu(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "XRTracker" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="XRTrackerActions.AddCallbacks(IXRTrackerActions)" />
    /// <seealso cref="XRTrackerActions.RemoveCallbacks(IXRTrackerActions)" />
    public interface IXRTrackerActions
    {
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerIsTracked0" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerIsTracked0(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerIsTracked1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerIsTracked1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerIsTracked2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerIsTracked2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerIsTracked3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerIsTracked3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerIsTracked4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerIsTracked4(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerTrackingState0" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerTrackingState0(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerTrackingState1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerTrackingState1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerTrackingState2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerTrackingState2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerTrackingState3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerTrackingState3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerTrackingState4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerTrackingState4(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerPosition0" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerPosition0(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerPosition1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerPosition1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerPosition2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerPosition2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerPosition3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerPosition3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerPosition4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerPosition4(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerRotation0" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerRotation0(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerRotation1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerRotation1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerRotation2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerRotation2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerRotation3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerRotation3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerRotation4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerRotation4(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerMenu0" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerMenu0(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerMenu1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerMenu1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerMenu2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerMenu2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerMenu3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerMenu3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerMenu4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerMenu4(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerGripPress0" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerGripPress0(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerGripPress1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerGripPress1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerGripPress2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerGripPress2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerGripPress3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerGripPress3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerGripPress4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerGripPress4(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerTriggerPress0" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerTriggerPress0(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerTriggerPress1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerTriggerPress1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerTriggerPress2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerTriggerPress2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerTriggerPress3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerTriggerPress3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerTriggerPress4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerTriggerPress4(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerTrackpadPress0" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerTrackpadPress0(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerTrackpadPress1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerTrackpadPress1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerTrackpadPress2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerTrackpadPress2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerTrackpadPress3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerTrackpadPress3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerTrackpadPress4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerTrackpadPress4(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerTrackpadTouch0" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerTrackpadTouch0(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerTrackpadTouch1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerTrackpadTouch1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerTrackpadTouch2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerTrackpadTouch2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerTrackpadTouch3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerTrackpadTouch3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UltimateTrackerTrackpadTouch4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUltimateTrackerTrackpadTouch4(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "ViveTracker" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="ViveTrackerActions.AddCallbacks(IViveTrackerActions)" />
    /// <seealso cref="ViveTrackerActions.RemoveCallbacks(IViveTrackerActions)" />
    public interface IViveTrackerActions
    {
        /// <summary>
        /// Method invoked when associated input action "LeftFootPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftFootPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftFootRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftFootRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightFootPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightFootPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightFootRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightFootRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftShoulderPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftShoulderPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftShoulderRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftShoulderRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightShoulderPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightShoulderPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightShoulderRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightShoulderRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftElbowPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftElbowPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftElbowRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftElbowRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightElbowPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightElbowPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightElbowRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightElbowRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftKneePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftKneePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftKneeRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftKneeRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightKneePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightKneePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightKneeRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightKneeRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "WaistPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnWaistPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "WaistRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnWaistRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ChestPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnChestPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ChestRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnChestRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "CameraPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCameraPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "CameraRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCameraRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "KeyboardPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnKeyboardPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "KeyboardRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnKeyboardRotation(InputAction.CallbackContext context);
    }
}
